
sx3_tach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002000  08002000  00012000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800201c  0800201c  0001201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002024  08002024  00012024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800202c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  2000000c  08002038  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000108  08002038  00020108  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dbd6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f9f  00000000  00000000  0002dc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006323  00000000  00000000  0002fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000910  00000000  00000000  00035ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b50  00000000  00000000  000367e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000458c  00000000  00000000  00037338  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003491  00000000  00000000  0003b8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003ed55  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b40  00000000  00000000  0003edd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001fe8 	.word	0x08001fe8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001fe8 	.word	0x08001fe8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b97a 	b.w	80004f4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	468c      	mov	ip, r1
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	9e08      	ldr	r6, [sp, #32]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d151      	bne.n	80002cc <__udivmoddi4+0xb4>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d96d      	bls.n	800030a <__udivmoddi4+0xf2>
 800022e:	fab2 fe82 	clz	lr, r2
 8000232:	f1be 0f00 	cmp.w	lr, #0
 8000236:	d00b      	beq.n	8000250 <__udivmoddi4+0x38>
 8000238:	f1ce 0c20 	rsb	ip, lr, #32
 800023c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000240:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000244:	fa02 f70e 	lsl.w	r7, r2, lr
 8000248:	ea4c 0c05 	orr.w	ip, ip, r5
 800024c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000250:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000254:	0c25      	lsrs	r5, r4, #16
 8000256:	fbbc f8fa 	udiv	r8, ip, sl
 800025a:	fa1f f987 	uxth.w	r9, r7
 800025e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000262:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000266:	fb08 f309 	mul.w	r3, r8, r9
 800026a:	42ab      	cmp	r3, r5
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x6c>
 800026e:	19ed      	adds	r5, r5, r7
 8000270:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000274:	f080 8123 	bcs.w	80004be <__udivmoddi4+0x2a6>
 8000278:	42ab      	cmp	r3, r5
 800027a:	f240 8120 	bls.w	80004be <__udivmoddi4+0x2a6>
 800027e:	f1a8 0802 	sub.w	r8, r8, #2
 8000282:	443d      	add	r5, r7
 8000284:	1aed      	subs	r5, r5, r3
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb5 f0fa 	udiv	r0, r5, sl
 800028c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000290:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000294:	fb00 f909 	mul.w	r9, r0, r9
 8000298:	45a1      	cmp	r9, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x98>
 800029c:	19e4      	adds	r4, r4, r7
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 810a 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80002a6:	45a1      	cmp	r9, r4
 80002a8:	f240 8107 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80002ac:	3802      	subs	r0, #2
 80002ae:	443c      	add	r4, r7
 80002b0:	eba4 0409 	sub.w	r4, r4, r9
 80002b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b8:	2100      	movs	r1, #0
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	d061      	beq.n	8000382 <__udivmoddi4+0x16a>
 80002be:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c2:	2300      	movs	r3, #0
 80002c4:	6034      	str	r4, [r6, #0]
 80002c6:	6073      	str	r3, [r6, #4]
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xc8>
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d054      	beq.n	800037e <__udivmoddi4+0x166>
 80002d4:	2100      	movs	r1, #0
 80002d6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	fab3 f183 	clz	r1, r3
 80002e4:	2900      	cmp	r1, #0
 80002e6:	f040 808e 	bne.w	8000406 <__udivmoddi4+0x1ee>
 80002ea:	42ab      	cmp	r3, r5
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xdc>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2d0>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb65 0503 	sbc.w	r5, r5, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	46ac      	mov	ip, r5
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d03f      	beq.n	8000382 <__udivmoddi4+0x16a>
 8000302:	e886 1010 	stmia.w	r6, {r4, ip}
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	b912      	cbnz	r2, 8000312 <__udivmoddi4+0xfa>
 800030c:	2701      	movs	r7, #1
 800030e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000312:	fab7 fe87 	clz	lr, r7
 8000316:	f1be 0f00 	cmp.w	lr, #0
 800031a:	d134      	bne.n	8000386 <__udivmoddi4+0x16e>
 800031c:	1beb      	subs	r3, r5, r7
 800031e:	0c3a      	lsrs	r2, r7, #16
 8000320:	fa1f fc87 	uxth.w	ip, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb3 f8f2 	udiv	r8, r3, r2
 800032a:	0c25      	lsrs	r5, r4, #16
 800032c:	fb02 3318 	mls	r3, r2, r8, r3
 8000330:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000334:	fb0c f308 	mul.w	r3, ip, r8
 8000338:	42ab      	cmp	r3, r5
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x134>
 800033c:	19ed      	adds	r5, r5, r7
 800033e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x132>
 8000344:	42ab      	cmp	r3, r5
 8000346:	f200 80d1 	bhi.w	80004ec <__udivmoddi4+0x2d4>
 800034a:	4680      	mov	r8, r0
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb5 f0f2 	udiv	r0, r5, r2
 8000354:	fb02 5510 	mls	r5, r2, r0, r5
 8000358:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800035c:	fb0c fc00 	mul.w	ip, ip, r0
 8000360:	45a4      	cmp	ip, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x15c>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x15a>
 800036c:	45a4      	cmp	ip, r4
 800036e:	f200 80b8 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 040c 	sub.w	r4, r4, ip
 8000378:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800037c:	e79d      	b.n	80002ba <__udivmoddi4+0xa2>
 800037e:	4631      	mov	r1, r6
 8000380:	4630      	mov	r0, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	f1ce 0420 	rsb	r4, lr, #32
 800038a:	fa05 f30e 	lsl.w	r3, r5, lr
 800038e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000392:	fa20 f804 	lsr.w	r8, r0, r4
 8000396:	0c3a      	lsrs	r2, r7, #16
 8000398:	fa25 f404 	lsr.w	r4, r5, r4
 800039c:	ea48 0803 	orr.w	r8, r8, r3
 80003a0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a8:	fb02 4411 	mls	r4, r2, r1, r4
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b4:	fb01 f30c 	mul.w	r3, r1, ip
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	fa00 f40e 	lsl.w	r4, r0, lr
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1bc>
 80003c0:	19ed      	adds	r5, r5, r7
 80003c2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003c6:	f080 808a 	bcs.w	80004de <__udivmoddi4+0x2c6>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	f240 8087 	bls.w	80004de <__udivmoddi4+0x2c6>
 80003d0:	3902      	subs	r1, #2
 80003d2:	443d      	add	r5, r7
 80003d4:	1aeb      	subs	r3, r5, r3
 80003d6:	fa1f f588 	uxth.w	r5, r8
 80003da:	fbb3 f0f2 	udiv	r0, r3, r2
 80003de:	fb02 3310 	mls	r3, r2, r0, r3
 80003e2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003e6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1e6>
 80003ee:	19ed      	adds	r5, r5, r7
 80003f0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f4:	d26f      	bcs.n	80004d6 <__udivmoddi4+0x2be>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d96d      	bls.n	80004d6 <__udivmoddi4+0x2be>
 80003fa:	3802      	subs	r0, #2
 80003fc:	443d      	add	r5, r7
 80003fe:	1aeb      	subs	r3, r5, r3
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	e78f      	b.n	8000326 <__udivmoddi4+0x10e>
 8000406:	f1c1 0720 	rsb	r7, r1, #32
 800040a:	fa22 f807 	lsr.w	r8, r2, r7
 800040e:	408b      	lsls	r3, r1
 8000410:	fa05 f401 	lsl.w	r4, r5, r1
 8000414:	ea48 0303 	orr.w	r3, r8, r3
 8000418:	fa20 fe07 	lsr.w	lr, r0, r7
 800041c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000420:	40fd      	lsrs	r5, r7
 8000422:	ea4e 0e04 	orr.w	lr, lr, r4
 8000426:	fbb5 f9fc 	udiv	r9, r5, ip
 800042a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800042e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000432:	fa1f f883 	uxth.w	r8, r3
 8000436:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043a:	fb09 f408 	mul.w	r4, r9, r8
 800043e:	42ac      	cmp	r4, r5
 8000440:	fa02 f201 	lsl.w	r2, r2, r1
 8000444:	fa00 fa01 	lsl.w	sl, r0, r1
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x244>
 800044a:	18ed      	adds	r5, r5, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	d243      	bcs.n	80004da <__udivmoddi4+0x2c2>
 8000452:	42ac      	cmp	r4, r5
 8000454:	d941      	bls.n	80004da <__udivmoddi4+0x2c2>
 8000456:	f1a9 0902 	sub.w	r9, r9, #2
 800045a:	441d      	add	r5, r3
 800045c:	1b2d      	subs	r5, r5, r4
 800045e:	fa1f fe8e 	uxth.w	lr, lr
 8000462:	fbb5 f0fc 	udiv	r0, r5, ip
 8000466:	fb0c 5510 	mls	r5, ip, r0, r5
 800046a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800046e:	fb00 f808 	mul.w	r8, r0, r8
 8000472:	45a0      	cmp	r8, r4
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x26e>
 8000476:	18e4      	adds	r4, r4, r3
 8000478:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800047c:	d229      	bcs.n	80004d2 <__udivmoddi4+0x2ba>
 800047e:	45a0      	cmp	r8, r4
 8000480:	d927      	bls.n	80004d2 <__udivmoddi4+0x2ba>
 8000482:	3802      	subs	r0, #2
 8000484:	441c      	add	r4, r3
 8000486:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048a:	eba4 0408 	sub.w	r4, r4, r8
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	454c      	cmp	r4, r9
 8000494:	46c6      	mov	lr, r8
 8000496:	464d      	mov	r5, r9
 8000498:	d315      	bcc.n	80004c6 <__udivmoddi4+0x2ae>
 800049a:	d012      	beq.n	80004c2 <__udivmoddi4+0x2aa>
 800049c:	b156      	cbz	r6, 80004b4 <__udivmoddi4+0x29c>
 800049e:	ebba 030e 	subs.w	r3, sl, lr
 80004a2:	eb64 0405 	sbc.w	r4, r4, r5
 80004a6:	fa04 f707 	lsl.w	r7, r4, r7
 80004aa:	40cb      	lsrs	r3, r1
 80004ac:	431f      	orrs	r7, r3
 80004ae:	40cc      	lsrs	r4, r1
 80004b0:	6037      	str	r7, [r6, #0]
 80004b2:	6074      	str	r4, [r6, #4]
 80004b4:	2100      	movs	r1, #0
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	4618      	mov	r0, r3
 80004bc:	e6f8      	b.n	80002b0 <__udivmoddi4+0x98>
 80004be:	4690      	mov	r8, r2
 80004c0:	e6e0      	b.n	8000284 <__udivmoddi4+0x6c>
 80004c2:	45c2      	cmp	sl, r8
 80004c4:	d2ea      	bcs.n	800049c <__udivmoddi4+0x284>
 80004c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ca:	eb69 0503 	sbc.w	r5, r9, r3
 80004ce:	3801      	subs	r0, #1
 80004d0:	e7e4      	b.n	800049c <__udivmoddi4+0x284>
 80004d2:	4628      	mov	r0, r5
 80004d4:	e7d7      	b.n	8000486 <__udivmoddi4+0x26e>
 80004d6:	4640      	mov	r0, r8
 80004d8:	e791      	b.n	80003fe <__udivmoddi4+0x1e6>
 80004da:	4681      	mov	r9, r0
 80004dc:	e7be      	b.n	800045c <__udivmoddi4+0x244>
 80004de:	4601      	mov	r1, r0
 80004e0:	e778      	b.n	80003d4 <__udivmoddi4+0x1bc>
 80004e2:	3802      	subs	r0, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	e745      	b.n	8000374 <__udivmoddi4+0x15c>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xe6>
 80004ec:	f1a8 0802 	sub.w	r8, r8, #2
 80004f0:	443d      	add	r5, r7
 80004f2:	e72b      	b.n	800034c <__udivmoddi4+0x134>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <HAL_InitTick+0x3c>)
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_InitTick+0x40>)
{
 80004fe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	7818      	ldrb	r0, [r3, #0]
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	fbb3 f3f0 	udiv	r3, r3, r0
 800050a:	6810      	ldr	r0, [r2, #0]
 800050c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000510:	f000 f896 	bl	8000640 <HAL_SYSTICK_Config>
 8000514:	4604      	mov	r4, r0
 8000516:	b958      	cbnz	r0, 8000530 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000518:	2d0f      	cmp	r5, #15
 800051a:	d809      	bhi.n	8000530 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	4602      	mov	r2, r0
 800051e:	4629      	mov	r1, r5
 8000520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000524:	f000 f84a 	bl	80005bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_InitTick+0x44>)
 800052a:	4620      	mov	r0, r4
 800052c:	601d      	str	r5, [r3, #0]
 800052e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000530:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000532:	bd38      	pop	{r3, r4, r5, pc}
 8000534:	20000008 	.word	0x20000008
 8000538:	20000000 	.word	0x20000000
 800053c:	20000004 	.word	0x20000004

08000540 <HAL_Init>:
{
 8000540:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <HAL_Init+0x30>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000552:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f81b 	bl	8000598 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff ffc8 	bl	80004f8 <HAL_InitTick>
  HAL_MspInit();
 8000568:	f001 fbe6 	bl	8001d38 <HAL_MspInit>
}
 800056c:	2000      	movs	r0, #0
 800056e:	bd08      	pop	{r3, pc}
 8000570:	40023c00 	.word	0x40023c00

08000574 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000574:	4a03      	ldr	r2, [pc, #12]	; (8000584 <HAL_IncTick+0x10>)
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <HAL_IncTick+0x14>)
 8000578:	6811      	ldr	r1, [r2, #0]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	440b      	add	r3, r1
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800058c:	4b01      	ldr	r3, [pc, #4]	; (8000594 <HAL_GetTick+0x8>)
 800058e:	6818      	ldr	r0, [r3, #0]
}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000002c 	.word	0x2000002c

08000598 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800059a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	0c1b      	lsrs	r3, r3, #16
 80005a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a8:	0200      	lsls	r0, r0, #8
 80005aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005b4:	60d3      	str	r3, [r2, #12]
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	68dc      	ldr	r4, [r3, #12]
 80005c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	bf28      	it	cs
 80005d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	f04f 0501 	mov.w	r5, #1
 80005d8:	fa05 f303 	lsl.w	r3, r5, r3
 80005dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e0:	bf8c      	ite	hi
 80005e2:	3c03      	subhi	r4, #3
 80005e4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e6:	4019      	ands	r1, r3
 80005e8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ea:	fa05 f404 	lsl.w	r4, r5, r4
 80005ee:	3c01      	subs	r4, #1
 80005f0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	ea42 0201 	orr.w	r2, r2, r1
 80005f8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	bfad      	iteet	ge
 80005fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	f000 000f 	andlt.w	r0, r0, #15
 8000606:	4b06      	ldrlt	r3, [pc, #24]	; (8000620 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	bfb5      	itete	lt
 800060e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	e000ed14 	.word	0xe000ed14

08000624 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000624:	2800      	cmp	r0, #0
 8000626:	db08      	blt.n	800063a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000628:	0942      	lsrs	r2, r0, #5
 800062a:	2301      	movs	r3, #1
 800062c:	f000 001f 	and.w	r0, r0, #31
 8000630:	fa03 f000 	lsl.w	r0, r3, r0
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_NVIC_EnableIRQ+0x18>)
 8000636:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100

08000640 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	3801      	subs	r0, #1
 8000642:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000646:	d20a      	bcs.n	800065e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	21f0      	movs	r1, #240	; 0xf0
 8000650:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000656:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800065e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000670:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000672:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000814 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000678:	4a64      	ldr	r2, [pc, #400]	; (800080c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800067c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000680:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000682:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000684:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000688:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800068c:	42b7      	cmp	r7, r6
 800068e:	f040 80ad 	bne.w	80007ec <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000692:	684c      	ldr	r4, [r1, #4]
 8000694:	f024 0a10 	bic.w	sl, r4, #16
 8000698:	f1ba 0f02 	cmp.w	sl, #2
 800069c:	d116      	bne.n	80006cc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800069e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80006a2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006aa:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006b2:	f04f 0e0f 	mov.w	lr, #15
 80006b6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80006ba:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006be:	690d      	ldr	r5, [r1, #16]
 80006c0:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006c8:	f8cc 5020 	str.w	r5, [ip, #32]
 80006cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006d2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d6:	fa05 f50c 	lsl.w	r5, r5, ip
 80006da:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006dc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ec:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80006f6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006fa:	d815      	bhi.n	8000728 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80006fc:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000700:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000704:	68cd      	ldr	r5, [r1, #12]
 8000706:	fa05 fa0c 	lsl.w	sl, r5, ip
 800070a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800070e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000712:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000716:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800071a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800071e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000722:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000726:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000728:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072a:	9d00      	ldr	r5, [sp, #0]
 800072c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072e:	688f      	ldr	r7, [r1, #8]
 8000730:	fa07 f70c 	lsl.w	r7, r7, ip
 8000734:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000736:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000738:	00e5      	lsls	r5, r4, #3
 800073a:	d557      	bpl.n	80007ec <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073c:	f04f 0b00 	mov.w	fp, #0
 8000740:	f8cd b00c 	str.w	fp, [sp, #12]
 8000744:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000748:	4d31      	ldr	r5, [pc, #196]	; (8000810 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800074e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000752:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000756:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800075a:	9703      	str	r7, [sp, #12]
 800075c:	9f03      	ldr	r7, [sp, #12]
 800075e:	f023 0703 	bic.w	r7, r3, #3
 8000762:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000766:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800076e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000772:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000776:	f04f 0e0f 	mov.w	lr, #15
 800077a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000780:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000784:	d039      	beq.n	80007fa <HAL_GPIO_Init+0x18e>
 8000786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078a:	42a8      	cmp	r0, r5
 800078c:	d037      	beq.n	80007fe <HAL_GPIO_Init+0x192>
 800078e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000792:	42a8      	cmp	r0, r5
 8000794:	d035      	beq.n	8000802 <HAL_GPIO_Init+0x196>
 8000796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079a:	42a8      	cmp	r0, r5
 800079c:	d033      	beq.n	8000806 <HAL_GPIO_Init+0x19a>
 800079e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a2:	42a8      	cmp	r0, r5
 80007a4:	bf14      	ite	ne
 80007a6:	2507      	movne	r5, #7
 80007a8:	2504      	moveq	r5, #4
 80007aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ae:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007b2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b6:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007bc:	bf0c      	ite	eq
 80007be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007c2:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007ca:	bf0c      	ite	eq
 80007cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ce:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007d0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d8:	bf0c      	ite	eq
 80007da:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007dc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007de:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007e0:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e4:	bf54      	ite	pl
 80007e6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007e8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007ea:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ec:	3301      	adds	r3, #1
 80007ee:	2b10      	cmp	r3, #16
 80007f0:	f47f af47 	bne.w	8000682 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f4:	b005      	add	sp, #20
 80007f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fa:	465d      	mov	r5, fp
 80007fc:	e7d5      	b.n	80007aa <HAL_GPIO_Init+0x13e>
 80007fe:	2501      	movs	r5, #1
 8000800:	e7d3      	b.n	80007aa <HAL_GPIO_Init+0x13e>
 8000802:	2502      	movs	r5, #2
 8000804:	e7d1      	b.n	80007aa <HAL_GPIO_Init+0x13e>
 8000806:	2503      	movs	r5, #3
 8000808:	e7cf      	b.n	80007aa <HAL_GPIO_Init+0x13e>
 800080a:	bf00      	nop
 800080c:	40013c00 	.word	0x40013c00
 8000810:	40020000 	.word	0x40020000
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000818:	b10a      	cbz	r2, 800081e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800081a:	6181      	str	r1, [r0, #24]
 800081c:	4770      	bx	lr
 800081e:	0409      	lsls	r1, r1, #16
 8000820:	e7fb      	b.n	800081a <HAL_GPIO_WritePin+0x2>
	...

08000824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000828:	4604      	mov	r4, r0
 800082a:	b918      	cbnz	r0, 8000834 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800082c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800082e:	b002      	add	sp, #8
 8000830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000834:	6803      	ldr	r3, [r0, #0]
 8000836:	07dd      	lsls	r5, r3, #31
 8000838:	d410      	bmi.n	800085c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	0798      	lsls	r0, r3, #30
 800083e:	d458      	bmi.n	80008f2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	071a      	lsls	r2, r3, #28
 8000844:	f100 809a 	bmi.w	800097c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	075b      	lsls	r3, r3, #29
 800084c:	f100 80b8 	bmi.w	80009c0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000850:	69a2      	ldr	r2, [r4, #24]
 8000852:	2a00      	cmp	r2, #0
 8000854:	f040 8119 	bne.w	8000a8a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000858:	2000      	movs	r0, #0
 800085a:	e7e8      	b.n	800082e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800085c:	4ba6      	ldr	r3, [pc, #664]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	f002 020c 	and.w	r2, r2, #12
 8000864:	2a04      	cmp	r2, #4
 8000866:	d007      	beq.n	8000878 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800086e:	2a08      	cmp	r2, #8
 8000870:	d10a      	bne.n	8000888 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	0259      	lsls	r1, r3, #9
 8000876:	d507      	bpl.n	8000888 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000878:	4b9f      	ldr	r3, [pc, #636]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	039a      	lsls	r2, r3, #14
 800087e:	d5dc      	bpl.n	800083a <HAL_RCC_OscConfig+0x16>
 8000880:	6863      	ldr	r3, [r4, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1d9      	bne.n	800083a <HAL_RCC_OscConfig+0x16>
 8000886:	e7d1      	b.n	800082c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000888:	6863      	ldr	r3, [r4, #4]
 800088a:	4d9b      	ldr	r5, [pc, #620]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 800088c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000890:	d111      	bne.n	80008b6 <HAL_RCC_OscConfig+0x92>
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000898:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800089a:	f7ff fe77 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089e:	4d96      	ldr	r5, [pc, #600]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a2:	682b      	ldr	r3, [r5, #0]
 80008a4:	039b      	lsls	r3, r3, #14
 80008a6:	d4c8      	bmi.n	800083a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a8:	f7ff fe70 	bl	800058c <HAL_GetTick>
 80008ac:	1b80      	subs	r0, r0, r6
 80008ae:	2864      	cmp	r0, #100	; 0x64
 80008b0:	d9f7      	bls.n	80008a2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80008b2:	2003      	movs	r0, #3
 80008b4:	e7bb      	b.n	800082e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ba:	d104      	bne.n	80008c6 <HAL_RCC_OscConfig+0xa2>
 80008bc:	682b      	ldr	r3, [r5, #0]
 80008be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c2:	602b      	str	r3, [r5, #0]
 80008c4:	e7e5      	b.n	8000892 <HAL_RCC_OscConfig+0x6e>
 80008c6:	682a      	ldr	r2, [r5, #0]
 80008c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008cc:	602a      	str	r2, [r5, #0]
 80008ce:	682a      	ldr	r2, [r5, #0]
 80008d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008d4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1df      	bne.n	800089a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80008da:	f7ff fe57 	bl	800058c <HAL_GetTick>
 80008de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	039f      	lsls	r7, r3, #14
 80008e4:	d5a9      	bpl.n	800083a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008e6:	f7ff fe51 	bl	800058c <HAL_GetTick>
 80008ea:	1b80      	subs	r0, r0, r6
 80008ec:	2864      	cmp	r0, #100	; 0x64
 80008ee:	d9f7      	bls.n	80008e0 <HAL_RCC_OscConfig+0xbc>
 80008f0:	e7df      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008f2:	4b81      	ldr	r3, [pc, #516]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	f012 0f0c 	tst.w	r2, #12
 80008fa:	d007      	beq.n	800090c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000902:	2a08      	cmp	r2, #8
 8000904:	d111      	bne.n	800092a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	025e      	lsls	r6, r3, #9
 800090a:	d40e      	bmi.n	800092a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090c:	4b7a      	ldr	r3, [pc, #488]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	0795      	lsls	r5, r2, #30
 8000912:	d502      	bpl.n	800091a <HAL_RCC_OscConfig+0xf6>
 8000914:	68e2      	ldr	r2, [r4, #12]
 8000916:	2a01      	cmp	r2, #1
 8000918:	d188      	bne.n	800082c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	6921      	ldr	r1, [r4, #16]
 800091e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000922:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000926:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000928:	e78a      	b.n	8000840 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800092a:	68e2      	ldr	r2, [r4, #12]
 800092c:	4b73      	ldr	r3, [pc, #460]	; (8000afc <HAL_RCC_OscConfig+0x2d8>)
 800092e:	b1b2      	cbz	r2, 800095e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000934:	f7ff fe2a 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	4d6f      	ldr	r5, [pc, #444]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800093a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	0798      	lsls	r0, r3, #30
 8000940:	d507      	bpl.n	8000952 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	6922      	ldr	r2, [r4, #16]
 8000946:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800094a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800094e:	602b      	str	r3, [r5, #0]
 8000950:	e776      	b.n	8000840 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000952:	f7ff fe1b 	bl	800058c <HAL_GetTick>
 8000956:	1b80      	subs	r0, r0, r6
 8000958:	2802      	cmp	r0, #2
 800095a:	d9ef      	bls.n	800093c <HAL_RCC_OscConfig+0x118>
 800095c:	e7a9      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800095e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000960:	f7ff fe14 	bl	800058c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000964:	4d64      	ldr	r5, [pc, #400]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000966:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	0799      	lsls	r1, r3, #30
 800096c:	f57f af68 	bpl.w	8000840 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000970:	f7ff fe0c 	bl	800058c <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	2802      	cmp	r0, #2
 8000978:	d9f6      	bls.n	8000968 <HAL_RCC_OscConfig+0x144>
 800097a:	e79a      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800097c:	6962      	ldr	r2, [r4, #20]
 800097e:	4b60      	ldr	r3, [pc, #384]	; (8000b00 <HAL_RCC_OscConfig+0x2dc>)
 8000980:	b17a      	cbz	r2, 80009a2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000986:	f7ff fe01 	bl	800058c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098a:	4d5b      	ldr	r5, [pc, #364]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800098c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000990:	079f      	lsls	r7, r3, #30
 8000992:	f53f af59 	bmi.w	8000848 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000996:	f7ff fdf9 	bl	800058c <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2802      	cmp	r0, #2
 800099e:	d9f6      	bls.n	800098e <HAL_RCC_OscConfig+0x16a>
 80009a0:	e787      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009a4:	f7ff fdf2 	bl	800058c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a8:	4d53      	ldr	r5, [pc, #332]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ae:	0798      	lsls	r0, r3, #30
 80009b0:	f57f af4a 	bpl.w	8000848 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b4:	f7ff fdea 	bl	800058c <HAL_GetTick>
 80009b8:	1b80      	subs	r0, r0, r6
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f6      	bls.n	80009ac <HAL_RCC_OscConfig+0x188>
 80009be:	e778      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009c0:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 80009c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009c8:	d128      	bne.n	8000a1c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	9201      	str	r2, [sp, #4]
 80009cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009d2:	641a      	str	r2, [r3, #64]	; 0x40
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e0:	4d48      	ldr	r5, [pc, #288]	; (8000b04 <HAL_RCC_OscConfig+0x2e0>)
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	05d9      	lsls	r1, r3, #23
 80009e6:	d51b      	bpl.n	8000a20 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e8:	68a3      	ldr	r3, [r4, #8]
 80009ea:	4d43      	ldr	r5, [pc, #268]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d127      	bne.n	8000a40 <HAL_RCC_OscConfig+0x21c>
 80009f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009f8:	f7ff fdc8 	bl	800058c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009fc:	4d3e      	ldr	r5, [pc, #248]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009fe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a00:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a06:	079b      	lsls	r3, r3, #30
 8000a08:	d539      	bpl.n	8000a7e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	f43f af20 	beq.w	8000850 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a10:	4a39      	ldr	r2, [pc, #228]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 8000a12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	e719      	b.n	8000850 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e7df      	b.n	80009e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a28:	f7ff fdb0 	bl	800058c <HAL_GetTick>
 8000a2c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2e:	682b      	ldr	r3, [r5, #0]
 8000a30:	05da      	lsls	r2, r3, #23
 8000a32:	d4d9      	bmi.n	80009e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a34:	f7ff fdaa 	bl	800058c <HAL_GetTick>
 8000a38:	1bc0      	subs	r0, r0, r7
 8000a3a:	2802      	cmp	r0, #2
 8000a3c:	d9f7      	bls.n	8000a2e <HAL_RCC_OscConfig+0x20a>
 8000a3e:	e738      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a40:	2b05      	cmp	r3, #5
 8000a42:	d104      	bne.n	8000a4e <HAL_RCC_OscConfig+0x22a>
 8000a44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a4c:	e7d0      	b.n	80009f0 <HAL_RCC_OscConfig+0x1cc>
 8000a4e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a50:	f022 0201 	bic.w	r2, r2, #1
 8000a54:	672a      	str	r2, [r5, #112]	; 0x70
 8000a56:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a58:	f022 0204 	bic.w	r2, r2, #4
 8000a5c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1ca      	bne.n	80009f8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a62:	f7ff fd93 	bl	800058c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a66:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a6a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a6e:	0798      	lsls	r0, r3, #30
 8000a70:	d5cb      	bpl.n	8000a0a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a72:	f7ff fd8b 	bl	800058c <HAL_GetTick>
 8000a76:	1bc0      	subs	r0, r0, r7
 8000a78:	4540      	cmp	r0, r8
 8000a7a:	d9f7      	bls.n	8000a6c <HAL_RCC_OscConfig+0x248>
 8000a7c:	e719      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fd85 	bl	800058c <HAL_GetTick>
 8000a82:	1bc0      	subs	r0, r0, r7
 8000a84:	4540      	cmp	r0, r8
 8000a86:	d9bd      	bls.n	8000a04 <HAL_RCC_OscConfig+0x1e0>
 8000a88:	e713      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a8a:	4d1b      	ldr	r5, [pc, #108]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
 8000a8c:	68ab      	ldr	r3, [r5, #8]
 8000a8e:	f003 030c 	and.w	r3, r3, #12
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	f43f aeca 	beq.w	800082c <HAL_RCC_OscConfig+0x8>
 8000a98:	4e1b      	ldr	r6, [pc, #108]	; (8000b08 <HAL_RCC_OscConfig+0x2e4>)
 8000a9a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a9e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa0:	d134      	bne.n	8000b0c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fd73 	bl	800058c <HAL_GetTick>
 8000aa6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	0199      	lsls	r1, r3, #6
 8000aac:	d41e      	bmi.n	8000aec <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aae:	6a22      	ldr	r2, [r4, #32]
 8000ab0:	69e3      	ldr	r3, [r4, #28]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ab6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000abc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ac0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac2:	4c0d      	ldr	r4, [pc, #52]	; (8000af8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ac4:	0852      	lsrs	r2, r2, #1
 8000ac6:	3a01      	subs	r2, #1
 8000ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000acc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ace:	2301      	movs	r3, #1
 8000ad0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ad2:	f7ff fd5b 	bl	800058c <HAL_GetTick>
 8000ad6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	019a      	lsls	r2, r3, #6
 8000adc:	f53f aebc 	bmi.w	8000858 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae0:	f7ff fd54 	bl	800058c <HAL_GetTick>
 8000ae4:	1b40      	subs	r0, r0, r5
 8000ae6:	2802      	cmp	r0, #2
 8000ae8:	d9f6      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x2b4>
 8000aea:	e6e2      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aec:	f7ff fd4e 	bl	800058c <HAL_GetTick>
 8000af0:	1bc0      	subs	r0, r0, r7
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9d8      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x284>
 8000af6:	e6dc      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
 8000af8:	40023800 	.word	0x40023800
 8000afc:	42470000 	.word	0x42470000
 8000b00:	42470e80 	.word	0x42470e80
 8000b04:	40007000 	.word	0x40007000
 8000b08:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b0c:	f7ff fd3e 	bl	800058c <HAL_GetTick>
 8000b10:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	019b      	lsls	r3, r3, #6
 8000b16:	f57f ae9f 	bpl.w	8000858 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1a:	f7ff fd37 	bl	800058c <HAL_GetTick>
 8000b1e:	1b00      	subs	r0, r0, r4
 8000b20:	2802      	cmp	r0, #2
 8000b22:	d9f6      	bls.n	8000b12 <HAL_RCC_OscConfig+0x2ee>
 8000b24:	e6c5      	b.n	80008b2 <HAL_RCC_OscConfig+0x8e>
 8000b26:	bf00      	nop

08000b28 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b28:	4913      	ldr	r1, [pc, #76]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b2c:	688b      	ldr	r3, [r1, #8]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d003      	beq.n	8000b3e <HAL_RCC_GetSysClockFreq+0x16>
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d003      	beq.n	8000b42 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b3c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b40:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b42:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b44:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b46:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4c:	bf14      	ite	ne
 8000b4e:	480c      	ldrne	r0, [pc, #48]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b50:	480a      	ldreq	r0, [pc, #40]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b56:	bf18      	it	ne
 8000b58:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b5e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b62:	f7ff fb41 	bl	80001e8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b6e:	3301      	adds	r3, #1
 8000b70:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b72:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b76:	bd08      	pop	{r3, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	00f42400 	.word	0x00f42400
 8000b80:	007a1200 	.word	0x007a1200

08000b84 <HAL_RCC_ClockConfig>:
{
 8000b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	b910      	cbnz	r0, 8000b94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b8e:	2001      	movs	r0, #1
 8000b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b94:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <HAL_RCC_ClockConfig+0x124>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	f002 020f 	and.w	r2, r2, #15
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	d328      	bcc.n	8000bf2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ba0:	6821      	ldr	r1, [r4, #0]
 8000ba2:	078f      	lsls	r7, r1, #30
 8000ba4:	d42d      	bmi.n	8000c02 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba6:	07c8      	lsls	r0, r1, #31
 8000ba8:	d440      	bmi.n	8000c2c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <HAL_RCC_ClockConfig+0x124>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	f002 020f 	and.w	r2, r2, #15
 8000bb2:	4295      	cmp	r5, r2
 8000bb4:	d366      	bcc.n	8000c84 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bb6:	6822      	ldr	r2, [r4, #0]
 8000bb8:	0751      	lsls	r1, r2, #29
 8000bba:	d46c      	bmi.n	8000c96 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bbc:	0713      	lsls	r3, r2, #28
 8000bbe:	d507      	bpl.n	8000bd0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bc0:	4a3a      	ldr	r2, [pc, #232]	; (8000cac <HAL_RCC_ClockConfig+0x128>)
 8000bc2:	6921      	ldr	r1, [r4, #16]
 8000bc4:	6893      	ldr	r3, [r2, #8]
 8000bc6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bd0:	f7ff ffaa 	bl	8000b28 <HAL_RCC_GetSysClockFreq>
 8000bd4:	4b35      	ldr	r3, [pc, #212]	; (8000cac <HAL_RCC_ClockConfig+0x128>)
 8000bd6:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <HAL_RCC_ClockConfig+0x12c>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bde:	5cd3      	ldrb	r3, [r2, r3]
 8000be0:	40d8      	lsrs	r0, r3
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_RCC_ClockConfig+0x130>)
 8000be4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fc86 	bl	80004f8 <HAL_InitTick>
  return HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf2:	b2ca      	uxtb	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d1c6      	bne.n	8000b8e <HAL_RCC_ClockConfig+0xa>
 8000c00:	e7ce      	b.n	8000ba0 <HAL_RCC_ClockConfig+0x1c>
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c04:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c08:	bf1e      	ittt	ne
 8000c0a:	689a      	ldrne	r2, [r3, #8]
 8000c0c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c10:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c12:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c14:	bf42      	ittt	mi
 8000c16:	689a      	ldrmi	r2, [r3, #8]
 8000c18:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c1c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	68a0      	ldr	r0, [r4, #8]
 8000c22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c26:	4302      	orrs	r2, r0
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	e7bc      	b.n	8000ba6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c2c:	6862      	ldr	r2, [r4, #4]
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <HAL_RCC_ClockConfig+0x128>)
 8000c30:	2a01      	cmp	r2, #1
 8000c32:	d11d      	bne.n	8000c70 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3a:	d0a8      	beq.n	8000b8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c3c:	4e1b      	ldr	r6, [pc, #108]	; (8000cac <HAL_RCC_ClockConfig+0x128>)
 8000c3e:	68b3      	ldr	r3, [r6, #8]
 8000c40:	f023 0303 	bic.w	r3, r3, #3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c48:	f7ff fca0 	bl	800058c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c4c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c50:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c52:	68b3      	ldr	r3, [r6, #8]
 8000c54:	6862      	ldr	r2, [r4, #4]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c5e:	d0a4      	beq.n	8000baa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c60:	f7ff fc94 	bl	800058c <HAL_GetTick>
 8000c64:	1bc0      	subs	r0, r0, r7
 8000c66:	4540      	cmp	r0, r8
 8000c68:	d9f3      	bls.n	8000c52 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c6a:	2003      	movs	r0, #3
}
 8000c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c70:	1e91      	subs	r1, r2, #2
 8000c72:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c74:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c76:	d802      	bhi.n	8000c7e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c7c:	e7dd      	b.n	8000c3a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7e:	f013 0f02 	tst.w	r3, #2
 8000c82:	e7da      	b.n	8000c3a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c84:	b2ea      	uxtb	r2, r5
 8000c86:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	429d      	cmp	r5, r3
 8000c90:	f47f af7d 	bne.w	8000b8e <HAL_RCC_ClockConfig+0xa>
 8000c94:	e78f      	b.n	8000bb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c96:	4905      	ldr	r1, [pc, #20]	; (8000cac <HAL_RCC_ClockConfig+0x128>)
 8000c98:	68e0      	ldr	r0, [r4, #12]
 8000c9a:	688b      	ldr	r3, [r1, #8]
 8000c9c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ca0:	4303      	orrs	r3, r0
 8000ca2:	608b      	str	r3, [r1, #8]
 8000ca4:	e78a      	b.n	8000bbc <HAL_RCC_ClockConfig+0x38>
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	0800200a 	.word	0x0800200a
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	460e      	mov	r6, r1
 8000cbe:	4615      	mov	r5, r2
 8000cc0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000cc2:	6821      	ldr	r1, [r4, #0]
 8000cc4:	688a      	ldr	r2, [r1, #8]
 8000cc6:	ea36 0302 	bics.w	r3, r6, r2
 8000cca:	d001      	beq.n	8000cd0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
}
 8000cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cd0:	1c6b      	adds	r3, r5, #1
 8000cd2:	d0f7      	beq.n	8000cc4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000cd4:	f7ff fc5a 	bl	800058c <HAL_GetTick>
 8000cd8:	1bc0      	subs	r0, r0, r7
 8000cda:	4285      	cmp	r5, r0
 8000cdc:	d8f1      	bhi.n	8000cc2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ce6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ce8:	6862      	ldr	r2, [r4, #4]
 8000cea:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000cee:	d10a      	bne.n	8000d06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000cf0:	68a2      	ldr	r2, [r4, #8]
 8000cf2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000cf6:	d002      	beq.n	8000cfe <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000cf8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000cfc:	d103      	bne.n	8000d06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d04:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d08:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d0c:	d107      	bne.n	8000d1e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d1c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d32:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <SPI_EndRxTxTransaction+0x54>)
 8000d36:	4e14      	ldr	r6, [pc, #80]	; (8000d88 <SPI_EndRxTxTransaction+0x58>)
 8000d38:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d3a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000d3c:	fbb5 f6f6 	udiv	r6, r5, r6
 8000d40:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000d44:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d46:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000d4a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000d4c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d4e:	d10d      	bne.n	8000d6c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d50:	460a      	mov	r2, r1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	f7ff ffb0 	bl	8000cb8 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000d58:	b910      	cbnz	r0, 8000d60 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000d5a:	2000      	movs	r0, #0
}
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000d68:	2003      	movs	r0, #3
 8000d6a:	e7f7      	b.n	8000d5c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000d6c:	9b01      	ldr	r3, [sp, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f3      	beq.n	8000d5a <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000d72:	9b01      	ldr	r3, [sp, #4]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	061b      	lsls	r3, r3, #24
 8000d7e:	d4f5      	bmi.n	8000d6c <SPI_EndRxTxTransaction+0x3c>
 8000d80:	e7eb      	b.n	8000d5a <SPI_EndRxTxTransaction+0x2a>
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	016e3600 	.word	0x016e3600

08000d8c <HAL_SPI_Init>:
{
 8000d8c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000d8e:	4604      	mov	r4, r0
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d036      	beq.n	8000e02 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d98:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000da0:	b91b      	cbnz	r3, 8000daa <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000da2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000da6:	f000 ff7b 	bl	8001ca0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000daa:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dac:	68a0      	ldr	r0, [r4, #8]
 8000dae:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000db6:	680b      	ldr	r3, [r1, #0]
 8000db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dbc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dbe:	6863      	ldr	r3, [r4, #4]
 8000dc0:	4303      	orrs	r3, r0
 8000dc2:	68e0      	ldr	r0, [r4, #12]
 8000dc4:	4303      	orrs	r3, r0
 8000dc6:	6920      	ldr	r0, [r4, #16]
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	6960      	ldr	r0, [r4, #20]
 8000dcc:	4303      	orrs	r3, r0
 8000dce:	69e0      	ldr	r0, [r4, #28]
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	6a20      	ldr	r0, [r4, #32]
 8000dd4:	4303      	orrs	r3, r0
 8000dd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000dde:	4303      	orrs	r3, r0
 8000de0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000de2:	0c12      	lsrs	r2, r2, #16
 8000de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de6:	f002 0204 	and.w	r2, r2, #4
 8000dea:	431a      	orrs	r2, r3
 8000dec:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dee:	69cb      	ldr	r3, [r1, #28]
 8000df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000df4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000df6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000df8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dfa:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000dfc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e00:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e02:	2001      	movs	r0, #1
}
 8000e04:	bd10      	pop	{r4, pc}

08000e06 <HAL_SPI_Transmit>:
{
 8000e06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e0a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000e0c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e10:	2b01      	cmp	r3, #1
{
 8000e12:	4604      	mov	r4, r0
 8000e14:	460d      	mov	r5, r1
 8000e16:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000e18:	f000 809b 	beq.w	8000f52 <HAL_SPI_Transmit+0x14c>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e22:	f7ff fbb3 	bl	800058c <HAL_GetTick>
 8000e26:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e28:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e2c:	b2c0      	uxtb	r0, r0
 8000e2e:	2801      	cmp	r0, #1
 8000e30:	f040 808d 	bne.w	8000f4e <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8000e34:	2d00      	cmp	r5, #0
 8000e36:	d05d      	beq.n	8000ef4 <HAL_SPI_Transmit+0xee>
 8000e38:	f1b8 0f00 	cmp.w	r8, #0
 8000e3c:	d05a      	beq.n	8000ef4 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e44:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e46:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e48:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e4a:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000e4c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000e50:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000e52:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000e54:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000e56:	6420      	str	r0, [r4, #64]	; 0x40
 8000e58:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e5a:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000e60:	bf08      	it	eq
 8000e62:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000e64:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000e68:	bf04      	itt	eq
 8000e6a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000e6e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e70:	6803      	ldr	r3, [r0, #0]
 8000e72:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000e74:	bf5e      	ittt	pl
 8000e76:	6803      	ldrpl	r3, [r0, #0]
 8000e78:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000e7c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e7e:	68e3      	ldr	r3, [r4, #12]
 8000e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	d13e      	bne.n	8000f06 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e88:	b113      	cbz	r3, 8000e90 <HAL_SPI_Transmit+0x8a>
 8000e8a:	f1b8 0f01 	cmp.w	r8, #1
 8000e8e:	d107      	bne.n	8000ea0 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e90:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000e94:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e96:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000ea0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b9a3      	cbnz	r3, 8000ed0 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000ea6:	463a      	mov	r2, r7
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff ff40 	bl	8000d30 <SPI_EndRxTxTransaction>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d149      	bne.n	8000f48 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000eb4:	68a3      	ldr	r3, [r4, #8]
 8000eb6:	b933      	cbnz	r3, 8000ec6 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000ec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000ec8:	3000      	adds	r0, #0
 8000eca:	bf18      	it	ne
 8000ecc:	2001      	movne	r0, #1
 8000ece:	e011      	b.n	8000ef4 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	6893      	ldr	r3, [r2, #8]
 8000ed4:	0798      	lsls	r0, r3, #30
 8000ed6:	d505      	bpl.n	8000ee4 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ed8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000eda:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000ede:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000ee0:	6323      	str	r3, [r4, #48]	; 0x30
 8000ee2:	e7d9      	b.n	8000e98 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000ee4:	f7ff fb52 	bl	800058c <HAL_GetTick>
 8000ee8:	1bc0      	subs	r0, r0, r7
 8000eea:	42b0      	cmp	r0, r6
 8000eec:	d3d8      	bcc.n	8000ea0 <HAL_SPI_Transmit+0x9a>
 8000eee:	1c71      	adds	r1, r6, #1
 8000ef0:	d0d6      	beq.n	8000ea0 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8000ef2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000efa:	2300      	movs	r3, #0
 8000efc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f00:	b002      	add	sp, #8
 8000f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f06:	b113      	cbz	r3, 8000f0e <HAL_SPI_Transmit+0x108>
 8000f08:	f1b8 0f01 	cmp.w	r8, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f0e:	782b      	ldrb	r3, [r5, #0]
 8000f10:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000f12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f14:	3301      	adds	r3, #1
 8000f16:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000f18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0be      	beq.n	8000ea6 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	0792      	lsls	r2, r2, #30
 8000f2e:	d503      	bpl.n	8000f38 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	731a      	strb	r2, [r3, #12]
 8000f36:	e7ec      	b.n	8000f12 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f38:	f7ff fb28 	bl	800058c <HAL_GetTick>
 8000f3c:	1bc0      	subs	r0, r0, r7
 8000f3e:	4286      	cmp	r6, r0
 8000f40:	d8ee      	bhi.n	8000f20 <HAL_SPI_Transmit+0x11a>
 8000f42:	1c73      	adds	r3, r6, #1
 8000f44:	d0ec      	beq.n	8000f20 <HAL_SPI_Transmit+0x11a>
 8000f46:	e7d4      	b.n	8000ef2 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	6563      	str	r3, [r4, #84]	; 0x54
 8000f4c:	e7b2      	b.n	8000eb4 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8000f4e:	2002      	movs	r0, #2
 8000f50:	e7d0      	b.n	8000ef4 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8000f52:	2002      	movs	r0, #2
 8000f54:	e7d4      	b.n	8000f00 <HAL_SPI_Transmit+0xfa>

08000f56 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f5c:	6803      	ldr	r3, [r0, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f64:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000f66:	bf1e      	ittt	ne
 8000f68:	681a      	ldrne	r2, [r3, #0]
 8000f6a:	f042 0201 	orrne.w	r2, r2, #1
 8000f6e:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8000f76:	2000      	movs	r0, #0
 8000f78:	4770      	bx	lr

08000f7a <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f7a:	6803      	ldr	r3, [r0, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f8a:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	681a      	ldrne	r2, [r3, #0]
 8000f90:	f042 0201 	orrne.w	r2, r2, #1
 8000f94:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000f96:	2000      	movs	r0, #0
 8000f98:	4770      	bx	lr

08000f9a <HAL_TIM_OC_DelayElapsedCallback>:
 8000f9a:	4770      	bx	lr

08000f9c <HAL_TIM_IC_CaptureCallback>:
 8000f9c:	4770      	bx	lr

08000f9e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_TIM_TriggerCallback>:
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fa2:	6803      	ldr	r3, [r0, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	0791      	lsls	r1, r2, #30
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fac:	d50e      	bpl.n	8000fcc <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	0792      	lsls	r2, r2, #30
 8000fb2:	d50b      	bpl.n	8000fcc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fb4:	f06f 0202 	mvn.w	r2, #2
 8000fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fbc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fbe:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fc0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fc2:	d077      	beq.n	80010b4 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000fc4:	f7ff ffea 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	0750      	lsls	r0, r2, #29
 8000fd2:	d510      	bpl.n	8000ff6 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	0751      	lsls	r1, r2, #29
 8000fd8:	d50d      	bpl.n	8000ff6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000fda:	f06f 0204 	mvn.w	r2, #4
 8000fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fe0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fe2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fe4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fe8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000fea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fec:	d068      	beq.n	80010c0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fee:	f7ff ffd5 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	0712      	lsls	r2, r2, #28
 8000ffc:	d50f      	bpl.n	800101e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	0710      	lsls	r0, r2, #28
 8001002:	d50c      	bpl.n	800101e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001004:	f06f 0208 	mvn.w	r2, #8
 8001008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800100a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800100c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800100e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001010:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001012:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001014:	d05a      	beq.n	80010cc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001016:	f7ff ffc1 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800101a:	2300      	movs	r3, #0
 800101c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	06d2      	lsls	r2, r2, #27
 8001024:	d510      	bpl.n	8001048 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	06d0      	lsls	r0, r2, #27
 800102a:	d50d      	bpl.n	8001048 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800102c:	f06f 0210 	mvn.w	r2, #16
 8001030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001032:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001034:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001036:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800103a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800103c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800103e:	d04b      	beq.n	80010d8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001040:	f7ff ffac 	bl	8000f9c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001044:	2300      	movs	r3, #0
 8001046:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	07d1      	lsls	r1, r2, #31
 800104e:	d508      	bpl.n	8001062 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	07d2      	lsls	r2, r2, #31
 8001054:	d505      	bpl.n	8001062 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001056:	f06f 0201 	mvn.w	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800105c:	4620      	mov	r0, r4
 800105e:	f000 faf7 	bl	8001650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	0610      	lsls	r0, r2, #24
 8001068:	d508      	bpl.n	800107c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	0611      	lsls	r1, r2, #24
 800106e:	d505      	bpl.n	800107c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001076:	4620      	mov	r0, r4
 8001078:	f000 f9d4 	bl	8001424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	691a      	ldr	r2, [r3, #16]
 8001080:	0652      	lsls	r2, r2, #25
 8001082:	d508      	bpl.n	8001096 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	0650      	lsls	r0, r2, #25
 8001088:	d505      	bpl.n	8001096 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800108a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800108e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001090:	4620      	mov	r0, r4
 8001092:	f7ff ff85 	bl	8000fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	0691      	lsls	r1, r2, #26
 800109c:	d522      	bpl.n	80010e4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	0692      	lsls	r2, r2, #26
 80010a2:	d51f      	bpl.n	80010e4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010a4:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80010a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010aa:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80010ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80010b0:	f000 b9b7 	b.w	8001422 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b4:	f7ff ff71 	bl	8000f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff ff70 	bl	8000f9e <HAL_TIM_PWM_PulseFinishedCallback>
 80010be:	e783      	b.n	8000fc8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c0:	f7ff ff6b 	bl	8000f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff ff6a 	bl	8000f9e <HAL_TIM_PWM_PulseFinishedCallback>
 80010ca:	e792      	b.n	8000ff2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010cc:	f7ff ff65 	bl	8000f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff ff64 	bl	8000f9e <HAL_TIM_PWM_PulseFinishedCallback>
 80010d6:	e7a0      	b.n	800101a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d8:	f7ff ff5f 	bl	8000f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff ff5e 	bl	8000f9e <HAL_TIM_PWM_PulseFinishedCallback>
 80010e2:	e7af      	b.n	8001044 <HAL_TIM_IRQHandler+0xa2>
 80010e4:	bd10      	pop	{r4, pc}
	...

080010e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010e8:	4a24      	ldr	r2, [pc, #144]	; (800117c <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80010ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010ec:	4290      	cmp	r0, r2
 80010ee:	d00e      	beq.n	800110e <TIM_Base_SetConfig+0x26>
 80010f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010f4:	d00b      	beq.n	800110e <TIM_Base_SetConfig+0x26>
 80010f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80010fa:	4290      	cmp	r0, r2
 80010fc:	d007      	beq.n	800110e <TIM_Base_SetConfig+0x26>
 80010fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001102:	4290      	cmp	r0, r2
 8001104:	d003      	beq.n	800110e <TIM_Base_SetConfig+0x26>
 8001106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800110a:	4290      	cmp	r0, r2
 800110c:	d115      	bne.n	800113a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800110e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001114:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001116:	4a19      	ldr	r2, [pc, #100]	; (800117c <TIM_Base_SetConfig+0x94>)
 8001118:	4290      	cmp	r0, r2
 800111a:	d019      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 800111c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001120:	d016      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 8001122:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001126:	4290      	cmp	r0, r2
 8001128:	d012      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 800112a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800112e:	4290      	cmp	r0, r2
 8001130:	d00e      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 8001132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001136:	4290      	cmp	r0, r2
 8001138:	d00a      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <TIM_Base_SetConfig+0x98>)
 800113c:	4290      	cmp	r0, r2
 800113e:	d007      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 8001140:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001144:	4290      	cmp	r0, r2
 8001146:	d003      	beq.n	8001150 <TIM_Base_SetConfig+0x68>
 8001148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800114c:	4290      	cmp	r0, r2
 800114e:	d103      	bne.n	8001158 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001150:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001156:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001158:	694a      	ldr	r2, [r1, #20]
 800115a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800115e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001160:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001162:	688b      	ldr	r3, [r1, #8]
 8001164:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001166:	680b      	ldr	r3, [r1, #0]
 8001168:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <TIM_Base_SetConfig+0x94>)
 800116c:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800116e:	bf04      	itt	eq
 8001170:	690b      	ldreq	r3, [r1, #16]
 8001172:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001174:	2301      	movs	r3, #1
 8001176:	6143      	str	r3, [r0, #20]
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40010000 	.word	0x40010000
 8001180:	40014000 	.word	0x40014000

08001184 <HAL_TIM_Base_Init>:
{
 8001184:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001186:	4604      	mov	r4, r0
 8001188:	b1a0      	cbz	r0, 80011b4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800118a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800118e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001192:	b91b      	cbnz	r3, 800119c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001194:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001198:	f000 fe82 	bl	8001ea0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800119c:	2302      	movs	r3, #2
 800119e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	1d21      	adds	r1, r4, #4
 80011a6:	f7ff ff9f 	bl	80010e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80011b0:	2000      	movs	r0, #0
 80011b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011b4:	2001      	movs	r0, #1
}
 80011b6:	bd10      	pop	{r4, pc}

080011b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80011b8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80011ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011bc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011be:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80011c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011c8:	6083      	str	r3, [r0, #8]
 80011ca:	bd10      	pop	{r4, pc}

080011cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80011cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011d0:	2b01      	cmp	r3, #1
{
 80011d2:	b570      	push	{r4, r5, r6, lr}
 80011d4:	4604      	mov	r4, r0
 80011d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80011da:	d019      	beq.n	8001210 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80011dc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80011e0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80011e2:	2301      	movs	r3, #1
 80011e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80011e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80011f2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80011f4:	680b      	ldr	r3, [r1, #0]
 80011f6:	2b40      	cmp	r3, #64	; 0x40
 80011f8:	d065      	beq.n	80012c6 <HAL_TIM_ConfigClockSource+0xfa>
 80011fa:	d815      	bhi.n	8001228 <HAL_TIM_ConfigClockSource+0x5c>
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	d00c      	beq.n	800121a <HAL_TIM_ConfigClockSource+0x4e>
 8001200:	d807      	bhi.n	8001212 <HAL_TIM_ConfigClockSource+0x46>
 8001202:	b153      	cbz	r3, 800121a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001204:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001206:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001208:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800120c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001210:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001212:	2b20      	cmp	r3, #32
 8001214:	d001      	beq.n	800121a <HAL_TIM_ConfigClockSource+0x4e>
 8001216:	2b30      	cmp	r3, #48	; 0x30
 8001218:	d1f4      	bne.n	8001204 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800121a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800121c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001224:	4313      	orrs	r3, r2
 8001226:	e01a      	b.n	800125e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001228:	2b60      	cmp	r3, #96	; 0x60
 800122a:	d034      	beq.n	8001296 <HAL_TIM_ConfigClockSource+0xca>
 800122c:	d819      	bhi.n	8001262 <HAL_TIM_ConfigClockSource+0x96>
 800122e:	2b50      	cmp	r3, #80	; 0x50
 8001230:	d1e8      	bne.n	8001204 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001232:	684a      	ldr	r2, [r1, #4]
 8001234:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001236:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001238:	6a05      	ldr	r5, [r0, #32]
 800123a:	f025 0501 	bic.w	r5, r5, #1
 800123e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001240:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001242:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800124a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800124e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001250:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001252:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001254:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800125a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800125e:	6083      	str	r3, [r0, #8]
 8001260:	e7d0      	b.n	8001204 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001262:	2b70      	cmp	r3, #112	; 0x70
 8001264:	d00c      	beq.n	8001280 <HAL_TIM_ConfigClockSource+0xb4>
 8001266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800126a:	d1cb      	bne.n	8001204 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800126c:	68cb      	ldr	r3, [r1, #12]
 800126e:	684a      	ldr	r2, [r1, #4]
 8001270:	6889      	ldr	r1, [r1, #8]
 8001272:	f7ff ffa1 	bl	80011b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	6893      	ldr	r3, [r2, #8]
 800127a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127e:	e008      	b.n	8001292 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001280:	68cb      	ldr	r3, [r1, #12]
 8001282:	684a      	ldr	r2, [r1, #4]
 8001284:	6889      	ldr	r1, [r1, #8]
 8001286:	f7ff ff97 	bl	80011b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800128e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001292:	6093      	str	r3, [r2, #8]
      break;
 8001294:	e7b6      	b.n	8001204 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001296:	684d      	ldr	r5, [r1, #4]
 8001298:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800129a:	6a01      	ldr	r1, [r0, #32]
 800129c:	f021 0110 	bic.w	r1, r1, #16
 80012a0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012a2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80012a4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012a6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80012ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012b2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80012b6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80012b8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012c0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80012c4:	e7cb      	b.n	800125e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012c6:	684a      	ldr	r2, [r1, #4]
 80012c8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012ca:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012cc:	6a05      	ldr	r5, [r0, #32]
 80012ce:	f025 0501 	bic.w	r5, r5, #1
 80012d2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012d4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012d6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012de:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80012e2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80012e4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012e6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012e8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012ee:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80012f2:	e7b4      	b.n	800125e <HAL_TIM_ConfigClockSource+0x92>

080012f4 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 80012f4:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80012f6:	684a      	ldr	r2, [r1, #4]
{
 80012f8:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 80012fa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80012fc:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001302:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001304:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001308:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 800130a:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800130c:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800130e:	d01e      	beq.n	800134e <TIM_SlaveTimer_SetConfig+0x5a>
 8001310:	d803      	bhi.n	800131a <TIM_SlaveTimer_SetConfig+0x26>
 8001312:	2a40      	cmp	r2, #64	; 0x40
 8001314:	d00b      	beq.n	800132e <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8001316:	2000      	movs	r0, #0
 8001318:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800131a:	2a60      	cmp	r2, #96	; 0x60
 800131c:	d027      	beq.n	800136e <TIM_SlaveTimer_SetConfig+0x7a>
 800131e:	2a70      	cmp	r2, #112	; 0x70
 8001320:	d1f9      	bne.n	8001316 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8001322:	690b      	ldr	r3, [r1, #16]
 8001324:	688a      	ldr	r2, [r1, #8]
 8001326:	68c9      	ldr	r1, [r1, #12]
 8001328:	f7ff ff46 	bl	80011b8 <TIM_ETR_SetConfig>
 800132c:	e7f3      	b.n	8001316 <TIM_SlaveTimer_SetConfig+0x22>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800132e:	2c05      	cmp	r4, #5
 8001330:	d030      	beq.n	8001394 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8001332:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001334:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001336:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800133e:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001344:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001348:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800134a:	6202      	str	r2, [r0, #32]
 800134c:	e7e3      	b.n	8001316 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800134e:	688a      	ldr	r2, [r1, #8]
 8001350:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001352:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001354:	6a04      	ldr	r4, [r0, #32]
 8001356:	f024 0401 	bic.w	r4, r4, #1
 800135a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800135c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800135e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001366:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800136a:	430a      	orrs	r2, r1
 800136c:	e7ec      	b.n	8001348 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800136e:	688c      	ldr	r4, [r1, #8]
 8001370:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001372:	6a01      	ldr	r1, [r0, #32]
 8001374:	f021 0110 	bic.w	r1, r1, #16
 8001378:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800137a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800137c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800137e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001386:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800138a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800138e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001390:	6203      	str	r3, [r0, #32]
 8001392:	e7c0      	b.n	8001316 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
}
 8001396:	bd38      	pop	{r3, r4, r5, pc}

08001398 <HAL_TIM_SlaveConfigSynchro>:
{
 8001398:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800139a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
{
 80013a0:	4604      	mov	r4, r0
 80013a2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80013a6:	d01c      	beq.n	80013e2 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80013a8:	2501      	movs	r5, #1
 80013aa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80013ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80013b2:	f7ff ff9f 	bl	80012f4 <TIM_SlaveTimer_SetConfig>
 80013b6:	b130      	cbz	r0, 80013c6 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80013b8:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 80013ba:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80013be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80013c2:	4628      	mov	r0, r5
 80013c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ce:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013d6:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80013d8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80013e0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80013e2:	4618      	mov	r0, r3
}
 80013e4:	bd38      	pop	{r3, r4, r5, pc}

080013e6 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80013e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013ea:	2b01      	cmp	r3, #1
{
 80013ec:	b530      	push	{r4, r5, lr}
 80013ee:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80013f2:	d014      	beq.n	800141e <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80013f4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80013fa:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80013fc:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013fe:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001400:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001402:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800140a:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800140c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800140e:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001410:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001412:	2301      	movs	r3, #1
 8001414:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001418:	2300      	movs	r3, #0
 800141a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800141e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001420:	bd30      	pop	{r4, r5, pc}

08001422 <HAL_TIMEx_CommutCallback>:
 8001422:	4770      	bx	lr

08001424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001424:	4770      	bx	lr
	...

08001428 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PE11   ------> S_TIM1_CH2
*/
void MX_GPIO_Init(void)
{
 8001428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800142c:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	2214      	movs	r2, #20
 8001430:	2100      	movs	r1, #0
 8001432:	a807      	add	r0, sp, #28
 8001434:	f000 fdd0 	bl	8001fd8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001438:	2400      	movs	r4, #0
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <MX_GPIO_Init+0x134>)
 800143c:	9401      	str	r4, [sp, #4]
 800143e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 8001440:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800156c <MX_GPIO_Init+0x144>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 8001444:	4e46      	ldr	r6, [pc, #280]	; (8001560 <MX_GPIO_Init+0x138>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001446:	4f47      	ldr	r7, [pc, #284]	; (8001564 <MX_GPIO_Init+0x13c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001448:	f042 0210 	orr.w	r2, r2, #16
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
 800144e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001450:	f002 0210 	and.w	r2, r2, #16
 8001454:	9201      	str	r2, [sp, #4]
 8001456:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001458:	9402      	str	r4, [sp, #8]
 800145a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001460:	631a      	str	r2, [r3, #48]	; 0x30
 8001462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001464:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001468:	9202      	str	r2, [sp, #8]
 800146a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	9403      	str	r4, [sp, #12]
 800146e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001470:	f042 0204 	orr.w	r2, r2, #4
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
 8001476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001478:	f002 0204 	and.w	r2, r2, #4
 800147c:	9203      	str	r2, [sp, #12]
 800147e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	9404      	str	r4, [sp, #16]
 8001482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001484:	f042 0202 	orr.w	r2, r2, #2
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	f002 0202 	and.w	r2, r2, #2
 8001490:	9204      	str	r2, [sp, #16]
 8001492:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001494:	9405      	str	r4, [sp, #20]
 8001496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001498:	f042 0208 	orr.w	r2, r2, #8
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
 800149e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a0:	f002 0208 	and.w	r2, r2, #8
 80014a4:	9205      	str	r2, [sp, #20]
 80014a6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	9406      	str	r4, [sp, #24]
 80014aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 80014ba:	4640      	mov	r0, r8
 80014bc:	2201      	movs	r2, #1
 80014be:	2103      	movs	r1, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 80014c2:	f7ff f9a9 	bl	8000818 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 80014c6:	4630      	mov	r0, r6
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ce:	f7ff f9a3 	bl	8000818 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014d2:	4622      	mov	r2, r4
 80014d4:	4638      	mov	r0, r7
 80014d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014da:	f7ff f99d 	bl	8000818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_BLA_ON_Pin|LCD_VDD_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LCD_BLA_ON_Pin|LCD_VDD_ON_Pin;
 80014e0:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	a907      	add	r1, sp, #28
 80014e4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LCD_BLA_ON_Pin|LCD_VDD_ON_Pin;
 80014e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f7ff f8bd 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	481a      	ldr	r0, [pc, #104]	; (8001568 <MX_GPIO_Init+0x140>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001504:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	f7ff f8b1 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ON_Pin;
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_ON_GPIO_Port, &GPIO_InitStruct);
 800150e:	a907      	add	r1, sp, #28
 8001510:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED_ON_Pin;
 8001512:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_ON_GPIO_Port, &GPIO_InitStruct);
 800151a:	f7ff f8a7 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001522:	a907      	add	r1, sp, #28
 8001524:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001526:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800152e:	f7ff f89d 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	a907      	add	r1, sp, #28
 8001538:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800153a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f7ff f894 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUT4_INPUT_Pin|BUT3_INPUT_Pin|BUT2_INPUT_Pin|BUT1_INPUT_Pin 
 8001544:	237f      	movs	r3, #127	; 0x7f
                          |BUT5_INPUT_Pin|BUT6_INPUT_Pin|BUT7_INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001546:	a907      	add	r1, sp, #28
 8001548:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BUT4_INPUT_Pin|BUT3_INPUT_Pin|BUT2_INPUT_Pin|BUT1_INPUT_Pin 
 800154a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f7ff f88c 	bl	800066c <HAL_GPIO_Init>

}
 8001554:	b00c      	add	sp, #48	; 0x30
 8001556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40020000 	.word	0x40020000
 8001568:	40021000 	.word	0x40021000
 800156c:	40020800 	.word	0x40020800

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b530      	push	{r4, r5, lr}
 8001572:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001574:	2230      	movs	r2, #48	; 0x30
 8001576:	2100      	movs	r1, #0
 8001578:	a808      	add	r0, sp, #32
 800157a:	f000 fd2d 	bl	8001fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157e:	2100      	movs	r1, #0
 8001580:	2214      	movs	r2, #20
 8001582:	a803      	add	r0, sp, #12
 8001584:	f000 fd28 	bl	8001fd8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2400      	movs	r4, #0
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <SystemClock_Config+0x84>)
 800158c:	9401      	str	r4, [sp, #4]
 800158e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001590:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <SystemClock_Config+0x88>)
 80015a2:	9402      	str	r4, [sp, #8]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ae:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b8:	2301      	movs	r3, #1
 80015ba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015bc:	2310      	movs	r3, #16
 80015be:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015c4:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015c8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f7ff f925 	bl	8000824 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80015e0:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80015e6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015e8:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ec:	f7ff faca 	bl	8000b84 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80015f0:	b015      	add	sp, #84	; 0x54
 80015f2:	bd30      	pop	{r4, r5, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <main>:
{
 80015fc:	b508      	push	{r3, lr}
  HAL_Init();
 80015fe:	f7fe ff9f 	bl	8000540 <HAL_Init>
  SystemClock_Config();
 8001602:	f7ff ffb5 	bl	8001570 <SystemClock_Config>
  MX_GPIO_Init();
 8001606:	f7ff ff0f 	bl	8001428 <MX_GPIO_Init>
  MX_SPI2_Init();
 800160a:	f000 fb25 	bl	8001c58 <MX_SPI2_Init>
  MX_TIM2_Init();
 800160e:	f000 fbe5 	bl	8001ddc <MX_TIM2_Init>
  MX_TIM9_Init();
 8001612:	f000 fc19 	bl	8001e48 <MX_TIM9_Init>
  initialize_lcd();
 8001616:	f000 f8a5 	bl	8001764 <initialize_lcd>
  HAL_TIM_Base_Start_IT(&htim2);
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <main+0x44>)
	  delay_nops(100000);
 800161c:	4d09      	ldr	r5, [pc, #36]	; (8001644 <main+0x48>)
	  if(CURRENT_RPM > 0) {
 800161e:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <main+0x4c>)
  HAL_TIM_Base_Start_IT(&htim2);
 8001620:	f7ff fcab 	bl	8000f7a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim9);
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <main+0x50>)
 8001626:	f7ff fc96 	bl	8000f56 <HAL_TIM_Base_Start>
	  delay_nops(100000);
 800162a:	4628      	mov	r0, r5
 800162c:	f000 f83f 	bl	80016ae <delay_nops>
	  if(CURRENT_RPM > 0) {
 8001630:	8820      	ldrh	r0, [r4, #0]
 8001632:	b118      	cbz	r0, 800163c <main+0x40>
		  write_to_lcd(CURRENT_RPM, LCD_FLAG_FORWARD);
 8001634:	2108      	movs	r1, #8
		  write_to_lcd(CURRENT_RPM, 0);
 8001636:	f000 fa21 	bl	8001a7c <write_to_lcd>
 800163a:	e7f6      	b.n	800162a <main+0x2e>
 800163c:	4601      	mov	r1, r0
 800163e:	e7fa      	b.n	8001636 <main+0x3a>
 8001640:	200000c8 	.word	0x200000c8
 8001644:	000186a0 	.word	0x000186a0
 8001648:	20000028 	.word	0x20000028
 800164c:	20000088 	.word	0x20000088

08001650 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001650:	b538      	push	{r3, r4, r5, lr}
	//static uint16_t rpm_history[10];
	//static uint8_t first_time_flag = 1;
	static uint8_t toggle = 0;
	uint16_t current_rpm = 0;
    if (htim->Instance == htim2.Instance)
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001654:	6802      	ldr	r2, [r0, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d11c      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x46>
    {

    	current_rpm = __HAL_TIM_GET_COUNTER(&htim9);
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x4c>)
    	__HAL_TIM_SET_COUNTER(&htim9, 0);
    	current_rpm *= 60; //convert from rps to rpm
    	CURRENT_RPM = current_rpm; //save in global

    	/* toggle LED */
    	if(toggle == 0) {
 800165e:	4c10      	ldr	r4, [pc, #64]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
    	current_rpm = __HAL_TIM_GET_COUNTER(&htim9);
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	6a53      	ldr	r3, [r2, #36]	; 0x24
    	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8001664:	2500      	movs	r5, #0
    	current_rpm = __HAL_TIM_GET_COUNTER(&htim9);
 8001666:	b29b      	uxth	r3, r3
    	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8001668:	6255      	str	r5, [r2, #36]	; 0x24
    	current_rpm *= 60; //convert from rps to rpm
 800166a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    	CURRENT_RPM = current_rpm; //save in global
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
    	current_rpm *= 60; //convert from rps to rpm
 8001670:	009b      	lsls	r3, r3, #2
    	CURRENT_RPM = current_rpm; //save in global
 8001672:	8013      	strh	r3, [r2, #0]
    	if(toggle == 0) {
 8001674:	7822      	ldrb	r2, [r4, #0]
 8001676:	b93a      	cbnz	r2, 8001688 <HAL_TIM_PeriodElapsedCallback+0x38>
    		HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_RESET);
 8001678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800167e:	f7ff f8cb 	bl	8000818 <HAL_GPIO_WritePin>
    		toggle = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	7023      	strb	r3, [r4, #0]
 8001686:	bd38      	pop	{r3, r4, r5, pc}
    	} else {
    		HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001690:	f7ff f8c2 	bl	8000818 <HAL_GPIO_WritePin>
    		toggle = 0;
 8001694:	7025      	strb	r5, [r4, #0]
 8001696:	bd38      	pop	{r3, r4, r5, pc}
 8001698:	200000c8 	.word	0x200000c8
 800169c:	20000088 	.word	0x20000088
 80016a0:	2000002a 	.word	0x2000002a
 80016a4:	20000028 	.word	0x20000028
 80016a8:	40020c00 	.word	0x40020c00

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	4770      	bx	lr

080016ae <delay_nops>:
	delay_nops(1000);
	return;
}

void delay_nops(int nop_count) {
	for (int i = 0; i < nop_count; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	4283      	cmp	r3, r0
 80016b2:	db00      	blt.n	80016b6 <delay_nops+0x8>
		asm("NOP");
	}
}
 80016b4:	4770      	bx	lr
		asm("NOP");
 80016b6:	bf00      	nop
	for (int i = 0; i < nop_count; i++) {
 80016b8:	3301      	adds	r3, #1
 80016ba:	e7f9      	b.n	80016b0 <delay_nops+0x2>

080016bc <generate_spi_clock_pulse>:
void generate_spi_clock_pulse(void) {
 80016bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_RESET);
 80016c0:	4c27      	ldr	r4, [pc, #156]	; (8001760 <generate_spi_clock_pulse+0xa4>)
void generate_spi_clock_pulse(void) {
 80016c2:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2103      	movs	r1, #3
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff f8a5 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1000);
 80016ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d2:	f7ff ffec 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 80016d6:	4620      	mov	r0, r4
 80016d8:	2201      	movs	r2, #1
 80016da:	2103      	movs	r1, #3
 80016dc:	f7ff f89c 	bl	8000818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016e0:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	2214      	movs	r2, #20
 80016e6:	2100      	movs	r1, #0
 80016e8:	a801      	add	r0, sp, #4
 80016ea:	f000 fc75 	bl	8001fd8 <memset>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	4620      	mov	r0, r4
 80016f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f6:	f7ff f88f 	bl	8000818 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016fa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2600      	movs	r6, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	f04f 0801 	mov.w	r8, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2703      	movs	r7, #3
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800170a:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	f8cd 8008 	str.w	r8, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f7fe ffaa 	bl	800066c <HAL_GPIO_Init>
	delay_nops(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800171c:	f7ff ffc7 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001720:	4632      	mov	r2, r6
 8001722:	4629      	mov	r1, r5
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff f877 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 800172a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172e:	f7ff ffbe 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001732:	4642      	mov	r2, r8
 8001734:	4629      	mov	r1, r5
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff f86e 	bl	8000818 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001742:	2305      	movs	r3, #5
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	4620      	mov	r0, r4
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001746:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001748:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f7fe ff8d 	bl	800066c <HAL_GPIO_Init>
	delay_nops(1000);
 8001752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001756:	f7ff ffaa 	bl	80016ae <delay_nops>
}
 800175a:	b006      	add	sp, #24
 800175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001760:	40020800 	.word	0x40020800

08001764 <initialize_lcd>:

void initialize_lcd(void) {
 8001764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001768:	b086      	sub	sp, #24

	//Take control of PC3 (MOSI) and PB13 (CLK) from the SPI peripheral.
	//The first time we call spi_generate_clock_pulse() the CLK pin will be
	//handled by SPI peripheral again.

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	2214      	movs	r2, #20
 800176c:	2100      	movs	r1, #0
 800176e:	a801      	add	r0, sp, #4
 8001770:	f000 fc32 	bl	8001fd8 <memset>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001774:	2200      	movs	r2, #0
 8001776:	2108      	movs	r1, #8
 8001778:	48bd      	ldr	r0, [pc, #756]	; (8001a70 <initialize_lcd+0x30c>)
 800177a:	f7ff f84d 	bl	8000818 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2400      	movs	r4, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 8001782:	2708      	movs	r7, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	f04f 0803 	mov.w	r8, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	a901      	add	r1, sp, #4
 800178a:	48b9      	ldr	r0, [pc, #740]	; (8001a70 <initialize_lcd+0x30c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 800178e:	9701      	str	r7, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	f8cd 8010 	str.w	r8, [sp, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f7fe ff69 	bl	800066c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800179a:	4622      	mov	r2, r4
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	48b4      	ldr	r0, [pc, #720]	; (8001a74 <initialize_lcd+0x310>)
 80017a2:	f7ff f839 	bl	8000818 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13; //CLOCK
 80017a6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	a901      	add	r1, sp, #4
 80017ac:	48b1      	ldr	r0, [pc, #708]	; (8001a74 <initialize_lcd+0x310>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_13; //CLOCK
 80017b0:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	f8cd 8010 	str.w	r8, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f7fe ff58 	bl	800066c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80017bc:	462a      	mov	r2, r5
 80017be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c2:	48ad      	ldr	r0, [pc, #692]	; (8001a78 <initialize_lcd+0x314>)
 80017c4:	f7ff f828 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(2000);
 80017c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017cc:	f7ff ff6f 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80017d0:	4622      	mov	r2, r4
 80017d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d6:	48a8      	ldr	r0, [pc, #672]	; (8001a78 <initialize_lcd+0x314>)
 80017d8:	f7ff f81e 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 80017dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e0:	f7ff ff65 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80017e4:	462a      	mov	r2, r5
 80017e6:	4639      	mov	r1, r7
 80017e8:	48a1      	ldr	r0, [pc, #644]	; (8001a70 <initialize_lcd+0x30c>)
 80017ea:	f7ff f815 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f2:	f7ff ff5c 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80017f6:	462a      	mov	r2, r5
 80017f8:	4631      	mov	r1, r6
 80017fa:	489e      	ldr	r0, [pc, #632]	; (8001a74 <initialize_lcd+0x310>)
 80017fc:	f7ff f80c 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 8001800:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001804:	f7ff ff53 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001808:	4622      	mov	r2, r4
 800180a:	4631      	mov	r1, r6
 800180c:	4899      	ldr	r0, [pc, #612]	; (8001a74 <initialize_lcd+0x310>)
 800180e:	f7ff f803 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 8001812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001816:	f7ff ff4a 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800181a:	462a      	mov	r2, r5
 800181c:	4631      	mov	r1, r6
 800181e:	4895      	ldr	r0, [pc, #596]	; (8001a74 <initialize_lcd+0x310>)
 8001820:	f7fe fffa 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 8001824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001828:	f7ff ff41 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800182c:	4622      	mov	r2, r4
 800182e:	4639      	mov	r1, r7
 8001830:	488f      	ldr	r0, [pc, #572]	; (8001a70 <initialize_lcd+0x30c>)
 8001832:	f7fe fff1 	bl	8000818 <HAL_GPIO_WritePin>
 8001836:	240b      	movs	r4, #11
	for(int i = 0; i < 11; i++) {
		generate_spi_clock_pulse();
 8001838:	f7ff ff40 	bl	80016bc <generate_spi_clock_pulse>
	for(int i = 0; i < 11; i++) {
 800183c:	3c01      	subs	r4, #1
 800183e:	d1fb      	bne.n	8001838 <initialize_lcd+0xd4>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2108      	movs	r1, #8
 8001844:	488a      	ldr	r0, [pc, #552]	; (8001a70 <initialize_lcd+0x30c>)
 8001846:	f7fe ffe7 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 800184a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184e:	f7ff ff2e 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001858:	4887      	ldr	r0, [pc, #540]	; (8001a78 <initialize_lcd+0x314>)
 800185a:	f7fe ffdd 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1500);
 800185e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001862:	f7ff ff24 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001866:	4622      	mov	r2, r4
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	4882      	ldr	r0, [pc, #520]	; (8001a78 <initialize_lcd+0x314>)
 800186e:	f7fe ffd3 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001876:	f7ff ff1a 	bl	80016ae <delay_nops>
	generate_spi_clock_pulse();
 800187a:	f7ff ff1f 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800187e:	4622      	mov	r2, r4
 8001880:	2108      	movs	r1, #8
 8001882:	487b      	ldr	r0, [pc, #492]	; (8001a70 <initialize_lcd+0x30c>)
 8001884:	f7fe ffc8 	bl	8000818 <HAL_GPIO_WritePin>
 8001888:	2408      	movs	r4, #8
	for(int i = 0; i < 8; i++) {
		generate_spi_clock_pulse();
 800188a:	f7ff ff17 	bl	80016bc <generate_spi_clock_pulse>
	for(int i = 0; i < 8; i++) {
 800188e:	3c01      	subs	r4, #1
 8001890:	d1fb      	bne.n	800188a <initialize_lcd+0x126>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	2108      	movs	r1, #8
 8001896:	4876      	ldr	r0, [pc, #472]	; (8001a70 <initialize_lcd+0x30c>)
 8001898:	f7fe ffbe 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 800189c:	f7ff ff0e 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80018a0:	4622      	mov	r2, r4
 80018a2:	2108      	movs	r1, #8
 80018a4:	4872      	ldr	r0, [pc, #456]	; (8001a70 <initialize_lcd+0x30c>)
 80018a6:	f7fe ffb7 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80018aa:	f7ff ff07 	bl	80016bc <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80018ae:	f7ff ff05 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2108      	movs	r1, #8
 80018b6:	486e      	ldr	r0, [pc, #440]	; (8001a70 <initialize_lcd+0x30c>)
 80018b8:	f7fe ffae 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1000);
 80018bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c0:	f7ff fef5 	bl	80016ae <delay_nops>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ca:	486b      	ldr	r0, [pc, #428]	; (8001a78 <initialize_lcd+0x314>)
 80018cc:	f7fe ffa4 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1500);
 80018d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80018d4:	f7ff feeb 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80018d8:	4622      	mov	r2, r4
 80018da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018de:	4866      	ldr	r0, [pc, #408]	; (8001a78 <initialize_lcd+0x314>)
 80018e0:	f7fe ff9a 	bl	8000818 <HAL_GPIO_WritePin>

	generate_spi_clock_pulse();
 80018e4:	f7ff feea 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80018e8:	4622      	mov	r2, r4
 80018ea:	2108      	movs	r1, #8
 80018ec:	4860      	ldr	r0, [pc, #384]	; (8001a70 <initialize_lcd+0x30c>)
 80018ee:	f7fe ff93 	bl	8000818 <HAL_GPIO_WritePin>
 80018f2:	2409      	movs	r4, #9
	for(int i = 0; i < 9; i++) {
		generate_spi_clock_pulse();
 80018f4:	f7ff fee2 	bl	80016bc <generate_spi_clock_pulse>
	for(int i = 0; i < 9; i++) {
 80018f8:	3c01      	subs	r4, #1
 80018fa:	d1fb      	bne.n	80018f4 <initialize_lcd+0x190>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2108      	movs	r1, #8
 8001900:	485b      	ldr	r0, [pc, #364]	; (8001a70 <initialize_lcd+0x30c>)
 8001902:	f7fe ff89 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001906:	f7ff fed9 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); //here
 800190a:	4622      	mov	r2, r4
 800190c:	2108      	movs	r1, #8
 800190e:	4858      	ldr	r0, [pc, #352]	; (8001a70 <initialize_lcd+0x30c>)
 8001910:	f7fe ff82 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001914:	f7ff fed2 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2108      	movs	r1, #8
 800191c:	4854      	ldr	r0, [pc, #336]	; (8001a70 <initialize_lcd+0x30c>)
 800191e:	f7fe ff7b 	bl	8000818 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001928:	4853      	ldr	r0, [pc, #332]	; (8001a78 <initialize_lcd+0x314>)
 800192a:	f7fe ff75 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1500);
 800192e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001932:	f7ff febc 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001936:	4622      	mov	r2, r4
 8001938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193c:	484e      	ldr	r0, [pc, #312]	; (8001a78 <initialize_lcd+0x314>)
 800193e:	f7fe ff6b 	bl	8000818 <HAL_GPIO_WritePin>

	generate_spi_clock_pulse();
 8001942:	f7ff febb 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001946:	4622      	mov	r2, r4
 8001948:	2108      	movs	r1, #8
 800194a:	4849      	ldr	r0, [pc, #292]	; (8001a70 <initialize_lcd+0x30c>)
 800194c:	f7fe ff64 	bl	8000818 <HAL_GPIO_WritePin>
 8001950:	2408      	movs	r4, #8
	for(int i = 0; i < 8; i++) {
		generate_spi_clock_pulse();
 8001952:	f7ff feb3 	bl	80016bc <generate_spi_clock_pulse>
	for(int i = 0; i < 8; i++) {
 8001956:	3c01      	subs	r4, #1
 8001958:	d1fb      	bne.n	8001952 <initialize_lcd+0x1ee>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	2108      	movs	r1, #8
 800195e:	4844      	ldr	r0, [pc, #272]	; (8001a70 <initialize_lcd+0x30c>)
 8001960:	f7fe ff5a 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001964:	f7ff feaa 	bl	80016bc <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 8001968:	f7ff fea8 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800196c:	4622      	mov	r2, r4
 800196e:	2108      	movs	r1, #8
 8001970:	483f      	ldr	r0, [pc, #252]	; (8001a70 <initialize_lcd+0x30c>)
 8001972:	f7fe ff51 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001976:	f7ff fea1 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	2108      	movs	r1, #8
 800197e:	483c      	ldr	r0, [pc, #240]	; (8001a70 <initialize_lcd+0x30c>)
 8001980:	f7fe ff4a 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1000);
 8001984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001988:	f7ff fe91 	bl	80016ae <delay_nops>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001992:	4839      	ldr	r0, [pc, #228]	; (8001a78 <initialize_lcd+0x314>)
 8001994:	f7fe ff40 	bl	8000818 <HAL_GPIO_WritePin>
	delay_nops(1500);
 8001998:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800199c:	f7ff fe87 	bl	80016ae <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019a0:	4622      	mov	r2, r4
 80019a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a6:	4834      	ldr	r0, [pc, #208]	; (8001a78 <initialize_lcd+0x314>)
 80019a8:	f7fe ff36 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019ac:	f7ff fe86 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80019b0:	4622      	mov	r2, r4
 80019b2:	2108      	movs	r1, #8
 80019b4:	482e      	ldr	r0, [pc, #184]	; (8001a70 <initialize_lcd+0x30c>)
 80019b6:	f7fe ff2f 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019ba:	f7ff fe7f 	bl	80016bc <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80019be:	f7ff fe7d 	bl	80016bc <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80019c2:	f7ff fe7b 	bl	80016bc <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80019c6:	f7ff fe79 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	2108      	movs	r1, #8
 80019ce:	4828      	ldr	r0, [pc, #160]	; (8001a70 <initialize_lcd+0x30c>)
 80019d0:	f7fe ff22 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019d4:	f7ff fe72 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80019d8:	4622      	mov	r2, r4
 80019da:	2108      	movs	r1, #8
 80019dc:	4824      	ldr	r0, [pc, #144]	; (8001a70 <initialize_lcd+0x30c>)
 80019de:	f7fe ff1b 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019e2:	f7ff fe6b 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2108      	movs	r1, #8
 80019ea:	4821      	ldr	r0, [pc, #132]	; (8001a70 <initialize_lcd+0x30c>)
 80019ec:	f7fe ff14 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019f0:	f7ff fe64 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80019f4:	4622      	mov	r2, r4
 80019f6:	2108      	movs	r1, #8
 80019f8:	481d      	ldr	r0, [pc, #116]	; (8001a70 <initialize_lcd+0x30c>)
 80019fa:	f7fe ff0d 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019fe:	f7ff fe5d 	bl	80016bc <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 8001a02:	f7ff fe5b 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2108      	movs	r1, #8
 8001a0a:	4819      	ldr	r0, [pc, #100]	; (8001a70 <initialize_lcd+0x30c>)
 8001a0c:	f7fe ff04 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a10:	f7ff fe54 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a14:	4622      	mov	r2, r4
 8001a16:	2108      	movs	r1, #8
 8001a18:	4815      	ldr	r0, [pc, #84]	; (8001a70 <initialize_lcd+0x30c>)
 8001a1a:	f7fe fefd 	bl	8000818 <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a1e:	f7ff fe4d 	bl	80016bc <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2108      	movs	r1, #8
 8001a26:	4812      	ldr	r0, [pc, #72]	; (8001a70 <initialize_lcd+0x30c>)
 8001a28:	f7fe fef6 	bl	8000818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a32:	4811      	ldr	r0, [pc, #68]	; (8001a78 <initialize_lcd+0x314>)
 8001a34:	f7fe fef0 	bl	8000818 <HAL_GPIO_WritePin>



	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2702      	movs	r7, #2
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a3a:	2308      	movs	r3, #8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2603      	movs	r6, #3
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3e:	2505      	movs	r5, #5
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	a901      	add	r1, sp, #4
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <initialize_lcd+0x30c>)
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a44:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a4c:	9505      	str	r5, [sp, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4e:	f7fe fe0d 	bl	800066c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	a901      	add	r1, sp, #4
 8001a58:	4806      	ldr	r0, [pc, #24]	; (8001a74 <initialize_lcd+0x310>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a5a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a62:	9505      	str	r5, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f7fe fe02 	bl	800066c <HAL_GPIO_Init>


	return; //whew...

}
 8001a68:	b006      	add	sp, #24
 8001a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a6e:	bf00      	nop
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020000 	.word	0x40020000

08001a7c <write_to_lcd>:
	uint8_t digit3 = 0; //thousands

	uint16_t temp = 0;

	temp = number_to_display;
	temp = temp % 10000; //ignore any extra digits
 8001a7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a80:	fbb0 f2f3 	udiv	r2, r0, r3
 8001a84:	fb02 0313 	mls	r3, r2, r3, r0
void write_to_lcd(uint16_t number_to_display, uint8_t flags) {
 8001a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temp = temp % 10000; //ignore any extra digits
 8001a8c:	b29b      	uxth	r3, r3
	digit3 = temp / 1000;
	temp = temp % 1000;
 8001a8e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001a92:	fbb3 f0f4 	udiv	r0, r3, r4
 8001a96:	fb04 3310 	mls	r3, r4, r0, r3
	digit2 = temp / 100;
	temp = temp % 100;
 8001a9a:	2264      	movs	r2, #100	; 0x64
	temp = temp % 1000;
 8001a9c:	b29b      	uxth	r3, r3
	digit1 = temp / 10;

	digit0 = LCD_FLAG_DIGIT_0 | flags;
 8001a9e:	f041 0510 	orr.w	r5, r1, #16
	temp = temp % 100;
 8001aa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aa6:	fb02 3311 	mls	r3, r2, r1, r3
 8001aaa:	4e67      	ldr	r6, [pc, #412]	; (8001c48 <write_to_lcd+0x1cc>)
	digit1 = temp / 10;
 8001aac:	220a      	movs	r2, #10
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	b2c0      	uxtb	r0, r0
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f816 9001 	ldrb.w	r9, [r6, r1]
 8001abe:	f816 8003 	ldrb.w	r8, [r6, r3]
 8001ac2:	5c37      	ldrb	r7, [r6, r0]

	//first split out the digits into separate characters



	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ac4:	4e61      	ldr	r6, [pc, #388]	; (8001c4c <write_to_lcd+0x1d0>)
void write_to_lcd(uint16_t number_to_display, uint8_t flags) {
 8001ac6:	b089      	sub	sp, #36	; 0x24
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ace:	4630      	mov	r0, r6
 8001ad0:	f7fe fea2 	bl	8000818 <HAL_GPIO_WritePin>
	  delay_nops(200);
 8001ad4:	20c8      	movs	r0, #200	; 0xc8
 8001ad6:	f7ff fdea 	bl	80016ae <delay_nops>
	  message[0] = 160;
 8001ada:	23a0      	movs	r3, #160	; 0xa0
	  message[1] = digit3;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001adc:	a802      	add	r0, sp, #8
	  message[0] = 160;
 8001ade:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit3;
 8001ae2:	f88d 7009 	strb.w	r7, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001ae6:	f7fe fb77 	bl	80001d8 <strlen>
 8001aea:	4f59      	ldr	r7, [pc, #356]	; (8001c50 <write_to_lcd+0x1d4>)
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af0:	b282      	uxth	r2, r0
 8001af2:	a902      	add	r1, sp, #8
 8001af4:	4638      	mov	r0, r7
 8001af6:	f7ff f986 	bl	8000e06 <HAL_SPI_Transmit>
	  generate_spi_clock_pulse();
 8001afa:	f7ff fddf 	bl	80016bc <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b04:	4630      	mov	r0, r6
 8001b06:	f7fe fe87 	bl	8000818 <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fdcf 	bl	80016ae <delay_nops>

	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7fe fe7e 	bl	8000818 <HAL_GPIO_WritePin>
	  delay_nops(200);
 8001b1c:	20c8      	movs	r0, #200	; 0xc8
 8001b1e:	f7ff fdc6 	bl	80016ae <delay_nops>
	  message[0] = 161;
 8001b22:	23a1      	movs	r3, #161	; 0xa1
	  message[1] = digit2;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b24:	a802      	add	r0, sp, #8
	  message[0] = 161;
 8001b26:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit2;
 8001b2a:	f88d 9009 	strb.w	r9, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b2e:	f7fe fb53 	bl	80001d8 <strlen>
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b36:	b282      	uxth	r2, r0
 8001b38:	a902      	add	r1, sp, #8
 8001b3a:	4638      	mov	r0, r7
 8001b3c:	f7ff f963 	bl	8000e06 <HAL_SPI_Transmit>
	  generate_spi_clock_pulse();
 8001b40:	f7ff fdbc 	bl	80016bc <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f7fe fe64 	bl	8000818 <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff fdac 	bl	80016ae <delay_nops>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f7fe fe5b 	bl	8000818 <HAL_GPIO_WritePin>

	  delay_nops(200);
 8001b62:	20c8      	movs	r0, #200	; 0xc8
 8001b64:	f7ff fda3 	bl	80016ae <delay_nops>
	  message[0] = 162;
 8001b68:	23a2      	movs	r3, #162	; 0xa2
	  message[1] = digit1;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b6a:	a802      	add	r0, sp, #8
	  message[0] = 162;
 8001b6c:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit1;
 8001b70:	f88d 8009 	strb.w	r8, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b74:	f7fe fb30 	bl	80001d8 <strlen>
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7c:	b282      	uxth	r2, r0
 8001b7e:	a902      	add	r1, sp, #8
 8001b80:	4638      	mov	r0, r7
 8001b82:	f7ff f940 	bl	8000e06 <HAL_SPI_Transmit>
	  delay_nops(1000);

	  /*force data line low due to an issue where the 'STOP' flag was influenced by the ten's digit segment 'G' value. Hack. */
		GPIO_InitTypeDef GPIO_InitStruct = {0};
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b86:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001c54 <write_to_lcd+0x1d8>
	  delay_nops(1000);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fd8f 	bl	80016ae <delay_nops>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	2214      	movs	r2, #20
 8001b92:	2100      	movs	r1, #0
 8001b94:	a803      	add	r0, sp, #12
 8001b96:	f000 fa1f 	bl	8001fd8 <memset>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	f7fe fe3a 	bl	8000818 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	f04f 0801 	mov.w	r8, #1
	  GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 8001ba8:	2308      	movs	r3, #8
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	f04f 0a00 	mov.w	sl, #0
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	a903      	add	r1, sp, #12
 8001bb0:	4648      	mov	r0, r9
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	f04f 0b03 	mov.w	fp, #3
	  GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 8001bb6:	9303      	str	r3, [sp, #12]
 8001bb8:	9301      	str	r3, [sp, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	f8cd 8010 	str.w	r8, [sp, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	f8cd a014 	str.w	sl, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	f8cd b018 	str.w	fp, [sp, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f7fe fd51 	bl	800066c <HAL_GPIO_Init>



	  generate_spi_clock_pulse();
 8001bca:	f7ff fd77 	bl	80016bc <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001bce:	4642      	mov	r2, r8
 8001bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f7fe fe1f 	bl	8000818 <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff fd67 	bl	80016ae <delay_nops>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001be0:	4652      	mov	r2, sl
 8001be2:	4630      	mov	r0, r6
 8001be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be8:	f7fe fe16 	bl	8000818 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bec:	9b01      	ldr	r3, [sp, #4]
 8001bee:	9303      	str	r3, [sp, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf2:	a903      	add	r1, sp, #12
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf6:	4648      	mov	r0, r9
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	f8cd a014 	str.w	sl, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	f8cd b018 	str.w	fp, [sp, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c04:	f7fe fd32 	bl	800066c <HAL_GPIO_Init>
	  delay_nops(200);
 8001c08:	20c8      	movs	r0, #200	; 0xc8
 8001c0a:	f7ff fd50 	bl	80016ae <delay_nops>
	  message[0] = 163;
 8001c0e:	23a3      	movs	r3, #163	; 0xa3
	  message[1] = digit0;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001c10:	a802      	add	r0, sp, #8
	  message[0] = 163;
 8001c12:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit0;
 8001c16:	f88d 5009 	strb.w	r5, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001c1a:	f7fe fadd 	bl	80001d8 <strlen>
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	b282      	uxth	r2, r0
 8001c24:	a902      	add	r1, sp, #8
 8001c26:	4638      	mov	r0, r7
 8001c28:	f7ff f8ed 	bl	8000e06 <HAL_SPI_Transmit>
	  generate_spi_clock_pulse();
 8001c2c:	f7ff fd46 	bl	80016bc <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c30:	4642      	mov	r2, r8
 8001c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c36:	4630      	mov	r0, r6
 8001c38:	f7fe fdee 	bl	8000818 <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff fd36 	bl	80016ae <delay_nops>


	return;
}
 8001c42:	b009      	add	sp, #36	; 0x24
 8001c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c48:	08002000 	.word	0x08002000
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	20000030 	.word	0x20000030
 8001c54:	40020800 	.word	0x40020800

08001c58 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <MX_SPI2_Init+0x40>)
{
 8001c5a:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c5c:	2202      	movs	r2, #2
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_SPI2_Init+0x44>)
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c60:	6102      	str	r2, [r0, #16]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c62:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c66:	2201      	movs	r2, #1
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c68:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c6c:	6142      	str	r2, [r0, #20]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6e:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c70:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c74:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c76:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c78:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7a:	6203      	str	r3, [r0, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c7c:	2238      	movs	r2, #56	; 0x38
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c80:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c82:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c84:	61c2      	str	r2, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 8001c86:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c88:	f7ff f880 	bl	8000d8c <HAL_SPI_Init>
 8001c8c:	b118      	cbz	r0, 8001c96 <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 8001c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001c92:	f7ff bd0b 	b.w	80016ac <Error_Handler>
 8001c96:	bd08      	pop	{r3, pc}
 8001c98:	20000030 	.word	0x20000030
 8001c9c:	40003800 	.word	0x40003800

08001ca0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	2214      	movs	r2, #20
 8001ca8:	2100      	movs	r1, #0
 8001caa:	a803      	add	r0, sp, #12
 8001cac:	f000 f994 	bl	8001fd8 <memset>
  if(spiHandle->Instance==SPI2)
 8001cb0:	6822      	ldr	r2, [r4, #0]
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_SPI_MspInit+0x8c>)
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d137      	bne.n	8001d28 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001cbc:	2400      	movs	r4, #0
 8001cbe:	9400      	str	r4, [sp, #0]
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ccc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cd0:	9200      	str	r2, [sp, #0]
 8001cd2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd4:	9401      	str	r4, [sp, #4]
 8001cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd8:	f042 0204 	orr.w	r2, r2, #4
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce0:	f002 0204 	and.w	r2, r2, #4
 8001ce4:	9201      	str	r2, [sp, #4]
 8001ce6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	9402      	str	r4, [sp, #8]
 8001cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cec:	f042 0202 	orr.w	r2, r2, #2
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cfe:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d02:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f7fe fcad 	bl	800066c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	a903      	add	r1, sp, #12
 8001d18:	4806      	ldr	r0, [pc, #24]	; (8001d34 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d22:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f7fe fca2 	bl	800066c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d28:	b009      	add	sp, #36	; 0x24
 8001d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2c:	40003800 	.word	0x40003800
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020400 	.word	0x40020400

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_MspInit+0x34>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	9100      	str	r1, [sp, #0]
 8001d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
 8001d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d4a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d4e:	9200      	str	r2, [sp, #0]
 8001d50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	9101      	str	r1, [sp, #4]
 8001d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	b002      	add	sp, #8
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <NMI_Handler>:
 8001d70:	4770      	bx	lr

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	e7fe      	b.n	8001d76 <BusFault_Handler>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler>

08001d7a <SVC_Handler>:
 8001d7a:	4770      	bx	lr

08001d7c <DebugMon_Handler>:
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	4770      	bx	lr

08001d80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f7fe bbf8 	b.w	8000574 <HAL_IncTick>

08001d84 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <TIM2_IRQHandler+0x8>)
 8001d86:	f7ff b90c 	b.w	8000fa2 <HAL_TIM_IRQHandler>
 8001d8a:	bf00      	nop
 8001d8c:	200000c8 	.word	0x200000c8

08001d90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	490f      	ldr	r1, [pc, #60]	; (8001dd0 <SystemInit+0x40>)
 8001d92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <SystemInit+0x44>)
 8001da0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001da2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001daa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001db2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001db6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <SystemInit+0x48>)
 8001dba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001dc4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001dca:	608b      	str	r3, [r1, #8]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	24003010 	.word	0x24003010

08001ddc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ddc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	2210      	movs	r2, #16
 8001de0:	2100      	movs	r1, #0
 8001de2:	a802      	add	r0, sp, #8
 8001de4:	f000 f8f8 	bl	8001fd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001de8:	4815      	ldr	r0, [pc, #84]	; (8001e40 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8001dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001df0:	e880 000c 	stmia.w	r0, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 25000000;
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_TIM2_Init+0x68>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfc:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dfe:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Period = 25000000;
 8001e00:	60c2      	str	r2, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e02:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e04:	f7ff f9be 	bl	8001184 <HAL_TIM_Base_Init>
 8001e08:	b108      	cbz	r0, 8001e0e <MX_TIM2_Init+0x32>
  {
    Error_Handler();
 8001e0a:	f7ff fc4f 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e12:	a902      	add	r1, sp, #8
 8001e14:	480a      	ldr	r0, [pc, #40]	; (8001e40 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e16:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e18:	f7ff f9d8 	bl	80011cc <HAL_TIM_ConfigClockSource>
 8001e1c:	b108      	cbz	r0, 8001e22 <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 8001e1e:	f7ff fc45 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2210      	movs	r2, #16
 8001e24:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e26:	4669      	mov	r1, sp
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2e:	f7ff fada 	bl	80013e6 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	b108      	cbz	r0, 8001e38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001e34:	f7ff fc3a 	bl	80016ac <Error_Handler>
  }

}
 8001e38:	b007      	add	sp, #28
 8001e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e3e:	bf00      	nop
 8001e40:	200000c8 	.word	0x200000c8
 8001e44:	017d7840 	.word	0x017d7840

08001e48 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e4a:	2214      	movs	r2, #20
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	a801      	add	r0, sp, #4
 8001e50:	f000 f8c2 	bl	8001fd8 <memset>

  htim9.Instance = TIM9;
 8001e54:	4810      	ldr	r0, [pc, #64]	; (8001e98 <MX_TIM9_Init+0x50>)
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_TIM9_Init+0x54>)
 8001e58:	6003      	str	r3, [r0, #0]
  htim9.Init.Prescaler = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	6043      	str	r3, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 65000;
 8001e60:	f64f 52e8 	movw	r2, #65000	; 0xfde8
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e66:	2380      	movs	r3, #128	; 0x80
  htim9.Init.Period = 65000;
 8001e68:	60c2      	str	r2, [r0, #12]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e6a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e6c:	f7ff f98a 	bl	8001184 <HAL_TIM_Base_Init>
 8001e70:	b108      	cbz	r0, 8001e76 <MX_TIM9_Init+0x2e>
  {
    Error_Handler();
 8001e72:	f7ff fc1b 	bl	80016ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001e76:	2307      	movs	r3, #7
 8001e78:	9301      	str	r3, [sp, #4]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e7a:	2350      	movs	r3, #80	; 0x50
 8001e7c:	9302      	str	r3, [sp, #8]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001e7e:	a901      	add	r1, sp, #4
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001e80:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_TIM9_Init+0x50>)
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001e84:	9303      	str	r3, [sp, #12]
  sSlaveConfig.TriggerFilter = 0;
 8001e86:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001e88:	f7ff fa86 	bl	8001398 <HAL_TIM_SlaveConfigSynchro>
 8001e8c:	b108      	cbz	r0, 8001e92 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001e8e:	f7ff fc0d 	bl	80016ac <Error_Handler>
  }

}
 8001e92:	b007      	add	sp, #28
 8001e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e98:	20000088 	.word	0x20000088
 8001e9c:	40014000 	.word	0x40014000

08001ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	2214      	movs	r2, #20
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	a803      	add	r0, sp, #12
 8001eac:	f000 f894 	bl	8001fd8 <memset>
  if(tim_baseHandle->Instance==TIM2)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d115      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001ebe:	9200      	str	r2, [sp, #0]
 8001ec0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ec2:	f041 0101 	orr.w	r1, r1, #1
 8001ec6:	6419      	str	r1, [r3, #64]	; 0x40
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	9300      	str	r3, [sp, #0]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ed0:	201c      	movs	r0, #28
 8001ed2:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ed4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ed6:	f7fe fb71 	bl	80005bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eda:	201c      	movs	r0, #28
 8001edc:	f7fe fba2 	bl	8000624 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001ee0:	b008      	add	sp, #32
 8001ee2:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM9)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <HAL_TIM_Base_MspInit+0x90>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d1fa      	bne.n	8001ee0 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_TIM_Base_MspInit+0x94>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001eee:	2100      	movs	r1, #0
 8001ef0:	9101      	str	r1, [sp, #4]
 8001ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8001efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001f00:	9201      	str	r2, [sp, #4]
 8001f02:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f04:	9102      	str	r1, [sp, #8]
 8001f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f08:	f042 0210 	orr.w	r2, r2, #16
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f24:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f26:	2303      	movs	r3, #3
 8001f28:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2a:	f7fe fb9f 	bl	800066c <HAL_GPIO_Init>
}
 8001f2e:	e7d7      	b.n	8001ee0 <HAL_TIM_Base_MspInit+0x40>
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40021000 	.word	0x40021000

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f42:	e003      	b.n	8001f4c <LoopCopyDataInit>

08001f44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f4a:	3104      	adds	r1, #4

08001f4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f54:	d3f6      	bcc.n	8001f44 <CopyDataInit>
  ldr  r2, =_sbss
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f58:	e002      	b.n	8001f60 <LoopFillZerobss>

08001f5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f5c:	f842 3b04 	str.w	r3, [r2], #4

08001f60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f64:	d3f9      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f66:	f7ff ff13 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f000 f811 	bl	8001f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff fb45 	bl	80015fc <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f78:	0800202c 	.word	0x0800202c
  ldr  r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001f84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001f88:	20000108 	.word	0x20000108

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <__libc_init_array>:
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	4e0d      	ldr	r6, [pc, #52]	; (8001fc8 <__libc_init_array+0x38>)
 8001f94:	4c0d      	ldr	r4, [pc, #52]	; (8001fcc <__libc_init_array+0x3c>)
 8001f96:	1ba4      	subs	r4, r4, r6
 8001f98:	10a4      	asrs	r4, r4, #2
 8001f9a:	2500      	movs	r5, #0
 8001f9c:	42a5      	cmp	r5, r4
 8001f9e:	d109      	bne.n	8001fb4 <__libc_init_array+0x24>
 8001fa0:	4e0b      	ldr	r6, [pc, #44]	; (8001fd0 <__libc_init_array+0x40>)
 8001fa2:	4c0c      	ldr	r4, [pc, #48]	; (8001fd4 <__libc_init_array+0x44>)
 8001fa4:	f000 f820 	bl	8001fe8 <_init>
 8001fa8:	1ba4      	subs	r4, r4, r6
 8001faa:	10a4      	asrs	r4, r4, #2
 8001fac:	2500      	movs	r5, #0
 8001fae:	42a5      	cmp	r5, r4
 8001fb0:	d105      	bne.n	8001fbe <__libc_init_array+0x2e>
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb8:	4798      	blx	r3
 8001fba:	3501      	adds	r5, #1
 8001fbc:	e7ee      	b.n	8001f9c <__libc_init_array+0xc>
 8001fbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fc2:	4798      	blx	r3
 8001fc4:	3501      	adds	r5, #1
 8001fc6:	e7f2      	b.n	8001fae <__libc_init_array+0x1e>
 8001fc8:	08002024 	.word	0x08002024
 8001fcc:	08002024 	.word	0x08002024
 8001fd0:	08002024 	.word	0x08002024
 8001fd4:	08002028 	.word	0x08002028

08001fd8 <memset>:
 8001fd8:	4402      	add	r2, r0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <memset+0xa>
 8001fe0:	4770      	bx	lr
 8001fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fe6:	e7f9      	b.n	8001fdc <memset+0x4>

08001fe8 <_init>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

08001ff4 <_fini>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr
