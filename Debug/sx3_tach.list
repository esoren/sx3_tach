
sx3_tach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002034  08002034  00012034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000108  20000108  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000dc4c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001f47  00000000  00000000  0002dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006421  00000000  00000000  0002fbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000465f  00000000  00000000  00037450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000035d7  00000000  00000000  0003baaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003f086  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b40  00000000  00000000  0003f104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800201c 	.word	0x0800201c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800201c 	.word	0x0800201c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f896 	bl	8000630 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000514:	f000 f84a 	bl	80005ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f81b 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 fc08 	bl	8001d6c <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c

08000588 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800058a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000598:	0200      	lsls	r0, r0, #8
 800059a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005a4:	60d3      	str	r3, [r2, #12]
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	68dc      	ldr	r4, [r3, #12]
 80005b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	2b04      	cmp	r3, #4
 80005be:	bf28      	it	cs
 80005c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 0501 	mov.w	r5, #1
 80005c8:	fa05 f303 	lsl.w	r3, r5, r3
 80005cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	bf8c      	ite	hi
 80005d2:	3c03      	subhi	r4, #3
 80005d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d6:	4019      	ands	r1, r3
 80005d8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005da:	fa05 f404 	lsl.w	r4, r5, r4
 80005de:	3c01      	subs	r4, #1
 80005e0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	ea42 0201 	orr.w	r2, r2, r1
 80005e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	bfad      	iteet	ge
 80005ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	f000 000f 	andlt.w	r0, r0, #15
 80005f6:	4b06      	ldrlt	r3, [pc, #24]	; (8000610 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	bfb5      	itete	lt
 80005fe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00
 8000610:	e000ed14 	.word	0xe000ed14

08000614 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000614:	2800      	cmp	r0, #0
 8000616:	db08      	blt.n	800062a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000618:	0942      	lsrs	r2, r0, #5
 800061a:	2301      	movs	r3, #1
 800061c:	f000 001f 	and.w	r0, r0, #31
 8000620:	fa03 f000 	lsl.w	r0, r3, r0
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_NVIC_EnableIRQ+0x18>)
 8000626:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100

08000630 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000630:	3801      	subs	r0, #1
 8000632:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000636:	d20a      	bcs.n	800064e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800063c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	21f0      	movs	r1, #240	; 0xf0
 8000640:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000644:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000646:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000648:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e010 	.word	0xe000e010
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000660:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000662:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000664:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000814 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000668:	4a68      	ldr	r2, [pc, #416]	; (800080c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800066a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000818 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000670:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000672:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000676:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000678:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000680:	45b6      	cmp	lr, r6
 8000682:	f040 80ae 	bne.w	80007e2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000686:	684c      	ldr	r4, [r1, #4]
 8000688:	f024 0710 	bic.w	r7, r4, #16
 800068c:	2f02      	cmp	r7, #2
 800068e:	d116      	bne.n	80006be <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000690:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000694:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000698:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800069c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006a4:	f04f 0c0f 	mov.w	ip, #15
 80006a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006ac:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006b0:	690d      	ldr	r5, [r1, #16]
 80006b2:	fa05 f50b 	lsl.w	r5, r5, fp
 80006b6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006ba:	f8ca 5020 	str.w	r5, [sl, #32]
 80006be:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006c4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c8:	fa05 f50a 	lsl.w	r5, r5, sl
 80006cc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ce:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006da:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006dc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006e2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e6:	d811      	bhi.n	800070c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006e8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006ea:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006ee:	68cf      	ldr	r7, [r1, #12]
 80006f0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006f4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006f8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006fa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006fc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000700:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000704:	409f      	lsls	r7, r3
 8000706:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800070a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800070c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800070e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000710:	688f      	ldr	r7, [r1, #8]
 8000712:	fa07 f70a 	lsl.w	r7, r7, sl
 8000716:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000718:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800071a:	00e5      	lsls	r5, r4, #3
 800071c:	d561      	bpl.n	80007e2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	f04f 0b00 	mov.w	fp, #0
 8000722:	f8cd b00c 	str.w	fp, [sp, #12]
 8000726:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800072a:	4d39      	ldr	r5, [pc, #228]	; (8000810 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000730:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000734:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000738:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800073c:	9703      	str	r7, [sp, #12]
 800073e:	9f03      	ldr	r7, [sp, #12]
 8000740:	f023 0703 	bic.w	r7, r3, #3
 8000744:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000748:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800074c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000750:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000754:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000758:	f04f 0e0f 	mov.w	lr, #15
 800075c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000760:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000762:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000766:	d043      	beq.n	80007f0 <HAL_GPIO_Init+0x194>
 8000768:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800076c:	42a8      	cmp	r0, r5
 800076e:	d041      	beq.n	80007f4 <HAL_GPIO_Init+0x198>
 8000770:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000774:	42a8      	cmp	r0, r5
 8000776:	d03f      	beq.n	80007f8 <HAL_GPIO_Init+0x19c>
 8000778:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077c:	42a8      	cmp	r0, r5
 800077e:	d03d      	beq.n	80007fc <HAL_GPIO_Init+0x1a0>
 8000780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000784:	42a8      	cmp	r0, r5
 8000786:	d03b      	beq.n	8000800 <HAL_GPIO_Init+0x1a4>
 8000788:	4548      	cmp	r0, r9
 800078a:	d03b      	beq.n	8000804 <HAL_GPIO_Init+0x1a8>
 800078c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000790:	42a8      	cmp	r0, r5
 8000792:	d039      	beq.n	8000808 <HAL_GPIO_Init+0x1ac>
 8000794:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000798:	42a8      	cmp	r0, r5
 800079a:	bf14      	ite	ne
 800079c:	2508      	movne	r5, #8
 800079e:	2507      	moveq	r5, #7
 80007a0:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007a8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007aa:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ac:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ae:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b2:	bf0c      	ite	eq
 80007b4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007b6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007b8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007ba:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007bc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c0:	bf0c      	ite	eq
 80007c2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007c6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ca:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007ce:	bf0c      	ite	eq
 80007d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007d2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007d4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007d6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007da:	bf54      	ite	pl
 80007dc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007de:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007e0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e2:	3301      	adds	r3, #1
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	f47f af44 	bne.w	8000672 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007ea:	b005      	add	sp, #20
 80007ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f0:	465d      	mov	r5, fp
 80007f2:	e7d5      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 80007f4:	2501      	movs	r5, #1
 80007f6:	e7d3      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 80007f8:	2502      	movs	r5, #2
 80007fa:	e7d1      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 80007fc:	2503      	movs	r5, #3
 80007fe:	e7cf      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 8000800:	2504      	movs	r5, #4
 8000802:	e7cd      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 8000804:	2505      	movs	r5, #5
 8000806:	e7cb      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 8000808:	2506      	movs	r5, #6
 800080a:	e7c9      	b.n	80007a0 <HAL_GPIO_Init+0x144>
 800080c:	40013c00 	.word	0x40013c00
 8000810:	40020000 	.word	0x40020000
 8000814:	40023800 	.word	0x40023800
 8000818:	40021400 	.word	0x40021400

0800081c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800081c:	b10a      	cbz	r2, 8000822 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800081e:	6181      	str	r1, [r0, #24]
 8000820:	4770      	bx	lr
 8000822:	0409      	lsls	r1, r1, #16
 8000824:	e7fb      	b.n	800081e <HAL_GPIO_WritePin+0x2>
	...

08000828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800082c:	4604      	mov	r4, r0
 800082e:	b918      	cbnz	r0, 8000838 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000830:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000832:	b002      	add	sp, #8
 8000834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000838:	6803      	ldr	r3, [r0, #0]
 800083a:	07dd      	lsls	r5, r3, #31
 800083c:	d410      	bmi.n	8000860 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	0798      	lsls	r0, r3, #30
 8000842:	d458      	bmi.n	80008f6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	071a      	lsls	r2, r3, #28
 8000848:	f100 809a 	bmi.w	8000980 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	075b      	lsls	r3, r3, #29
 8000850:	f100 80b8 	bmi.w	80009c4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000854:	69a2      	ldr	r2, [r4, #24]
 8000856:	2a00      	cmp	r2, #0
 8000858:	f040 8119 	bne.w	8000a8e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800085c:	2000      	movs	r0, #0
 800085e:	e7e8      	b.n	8000832 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000860:	4ba6      	ldr	r3, [pc, #664]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	f002 020c 	and.w	r2, r2, #12
 8000868:	2a04      	cmp	r2, #4
 800086a:	d007      	beq.n	800087c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000872:	2a08      	cmp	r2, #8
 8000874:	d10a      	bne.n	800088c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	0259      	lsls	r1, r3, #9
 800087a:	d507      	bpl.n	800088c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800087c:	4b9f      	ldr	r3, [pc, #636]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	039a      	lsls	r2, r3, #14
 8000882:	d5dc      	bpl.n	800083e <HAL_RCC_OscConfig+0x16>
 8000884:	6863      	ldr	r3, [r4, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1d9      	bne.n	800083e <HAL_RCC_OscConfig+0x16>
 800088a:	e7d1      	b.n	8000830 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	4d9b      	ldr	r5, [pc, #620]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 8000890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000894:	d111      	bne.n	80008ba <HAL_RCC_OscConfig+0x92>
 8000896:	682b      	ldr	r3, [r5, #0]
 8000898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800089e:	f7ff fe6d 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a2:	4d96      	ldr	r5, [pc, #600]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a6:	682b      	ldr	r3, [r5, #0]
 80008a8:	039b      	lsls	r3, r3, #14
 80008aa:	d4c8      	bmi.n	800083e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fe66 	bl	800057c <HAL_GetTick>
 80008b0:	1b80      	subs	r0, r0, r6
 80008b2:	2864      	cmp	r0, #100	; 0x64
 80008b4:	d9f7      	bls.n	80008a6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e7bb      	b.n	8000832 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008be:	d104      	bne.n	80008ca <HAL_RCC_OscConfig+0xa2>
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c6:	602b      	str	r3, [r5, #0]
 80008c8:	e7e5      	b.n	8000896 <HAL_RCC_OscConfig+0x6e>
 80008ca:	682a      	ldr	r2, [r5, #0]
 80008cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008d0:	602a      	str	r2, [r5, #0]
 80008d2:	682a      	ldr	r2, [r5, #0]
 80008d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008d8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1df      	bne.n	800089e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80008de:	f7ff fe4d 	bl	800057c <HAL_GetTick>
 80008e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	039f      	lsls	r7, r3, #14
 80008e8:	d5a9      	bpl.n	800083e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ea:	f7ff fe47 	bl	800057c <HAL_GetTick>
 80008ee:	1b80      	subs	r0, r0, r6
 80008f0:	2864      	cmp	r0, #100	; 0x64
 80008f2:	d9f7      	bls.n	80008e4 <HAL_RCC_OscConfig+0xbc>
 80008f4:	e7df      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008f6:	4b81      	ldr	r3, [pc, #516]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	f012 0f0c 	tst.w	r2, #12
 80008fe:	d007      	beq.n	8000910 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000906:	2a08      	cmp	r2, #8
 8000908:	d111      	bne.n	800092e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	025e      	lsls	r6, r3, #9
 800090e:	d40e      	bmi.n	800092e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000910:	4b7a      	ldr	r3, [pc, #488]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	0795      	lsls	r5, r2, #30
 8000916:	d502      	bpl.n	800091e <HAL_RCC_OscConfig+0xf6>
 8000918:	68e2      	ldr	r2, [r4, #12]
 800091a:	2a01      	cmp	r2, #1
 800091c:	d188      	bne.n	8000830 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	6921      	ldr	r1, [r4, #16]
 8000922:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000926:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800092a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800092c:	e78a      	b.n	8000844 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800092e:	68e2      	ldr	r2, [r4, #12]
 8000930:	4b73      	ldr	r3, [pc, #460]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 8000932:	b1b2      	cbz	r2, 8000962 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000938:	f7ff fe20 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093c:	4d6f      	ldr	r5, [pc, #444]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800093e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	0798      	lsls	r0, r3, #30
 8000944:	d507      	bpl.n	8000956 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	6922      	ldr	r2, [r4, #16]
 800094a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800094e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000952:	602b      	str	r3, [r5, #0]
 8000954:	e776      	b.n	8000844 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000956:	f7ff fe11 	bl	800057c <HAL_GetTick>
 800095a:	1b80      	subs	r0, r0, r6
 800095c:	2802      	cmp	r0, #2
 800095e:	d9ef      	bls.n	8000940 <HAL_RCC_OscConfig+0x118>
 8000960:	e7a9      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fe0a 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000968:	4d64      	ldr	r5, [pc, #400]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800096a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	0799      	lsls	r1, r3, #30
 8000970:	f57f af68 	bpl.w	8000844 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000974:	f7ff fe02 	bl	800057c <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f6      	bls.n	800096c <HAL_RCC_OscConfig+0x144>
 800097e:	e79a      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000980:	6962      	ldr	r2, [r4, #20]
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <HAL_RCC_OscConfig+0x2dc>)
 8000984:	b17a      	cbz	r2, 80009a6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800098a:	f7ff fdf7 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	4d5b      	ldr	r5, [pc, #364]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000990:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000992:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000994:	079f      	lsls	r7, r3, #30
 8000996:	f53f af59 	bmi.w	800084c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800099a:	f7ff fdef 	bl	800057c <HAL_GetTick>
 800099e:	1b80      	subs	r0, r0, r6
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9f6      	bls.n	8000992 <HAL_RCC_OscConfig+0x16a>
 80009a4:	e787      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009a8:	f7ff fde8 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ac:	4d53      	ldr	r5, [pc, #332]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009b2:	0798      	lsls	r0, r3, #30
 80009b4:	f57f af4a 	bpl.w	800084c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b8:	f7ff fde0 	bl	800057c <HAL_GetTick>
 80009bc:	1b80      	subs	r0, r0, r6
 80009be:	2802      	cmp	r0, #2
 80009c0:	d9f6      	bls.n	80009b0 <HAL_RCC_OscConfig+0x188>
 80009c2:	e778      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009c4:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 80009c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009cc:	d128      	bne.n	8000a20 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	9201      	str	r2, [sp, #4]
 80009d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009d6:	641a      	str	r2, [r3, #64]	; 0x40
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009e2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e4:	4d48      	ldr	r5, [pc, #288]	; (8000b08 <HAL_RCC_OscConfig+0x2e0>)
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	05d9      	lsls	r1, r3, #23
 80009ea:	d51b      	bpl.n	8000a24 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ec:	68a3      	ldr	r3, [r4, #8]
 80009ee:	4d43      	ldr	r5, [pc, #268]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d127      	bne.n	8000a44 <HAL_RCC_OscConfig+0x21c>
 80009f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009fc:	f7ff fdbe 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a00:	4d3e      	ldr	r5, [pc, #248]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a02:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a04:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a0a:	079b      	lsls	r3, r3, #30
 8000a0c:	d539      	bpl.n	8000a82 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	f43f af20 	beq.w	8000854 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 8000a16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	e719      	b.n	8000854 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a20:	2600      	movs	r6, #0
 8000a22:	e7df      	b.n	80009e4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fda6 	bl	800057c <HAL_GetTick>
 8000a30:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	05da      	lsls	r2, r3, #23
 8000a36:	d4d9      	bmi.n	80009ec <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a38:	f7ff fda0 	bl	800057c <HAL_GetTick>
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	2802      	cmp	r0, #2
 8000a40:	d9f7      	bls.n	8000a32 <HAL_RCC_OscConfig+0x20a>
 8000a42:	e738      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	d104      	bne.n	8000a52 <HAL_RCC_OscConfig+0x22a>
 8000a48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a50:	e7d0      	b.n	80009f4 <HAL_RCC_OscConfig+0x1cc>
 8000a52:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a54:	f022 0201 	bic.w	r2, r2, #1
 8000a58:	672a      	str	r2, [r5, #112]	; 0x70
 8000a5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a5c:	f022 0204 	bic.w	r2, r2, #4
 8000a60:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1ca      	bne.n	80009fc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a66:	f7ff fd89 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a6e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a72:	0798      	lsls	r0, r3, #30
 8000a74:	d5cb      	bpl.n	8000a0e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a76:	f7ff fd81 	bl	800057c <HAL_GetTick>
 8000a7a:	1bc0      	subs	r0, r0, r7
 8000a7c:	4540      	cmp	r0, r8
 8000a7e:	d9f7      	bls.n	8000a70 <HAL_RCC_OscConfig+0x248>
 8000a80:	e719      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a82:	f7ff fd7b 	bl	800057c <HAL_GetTick>
 8000a86:	1bc0      	subs	r0, r0, r7
 8000a88:	4540      	cmp	r0, r8
 8000a8a:	d9bd      	bls.n	8000a08 <HAL_RCC_OscConfig+0x1e0>
 8000a8c:	e713      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a8e:	4d1b      	ldr	r5, [pc, #108]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
 8000a90:	68ab      	ldr	r3, [r5, #8]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	f43f aeca 	beq.w	8000830 <HAL_RCC_OscConfig+0x8>
 8000a9c:	4e1b      	ldr	r6, [pc, #108]	; (8000b0c <HAL_RCC_OscConfig+0x2e4>)
 8000a9e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000aa2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa4:	d134      	bne.n	8000b10 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000aa6:	f7ff fd69 	bl	800057c <HAL_GetTick>
 8000aaa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aac:	682b      	ldr	r3, [r5, #0]
 8000aae:	0199      	lsls	r1, r3, #6
 8000ab0:	d41e      	bmi.n	8000af0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ab2:	6a22      	ldr	r2, [r4, #32]
 8000ab4:	69e3      	ldr	r3, [r4, #28]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000abe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ac0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ac4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac6:	4c0d      	ldr	r4, [pc, #52]	; (8000afc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ac8:	0852      	lsrs	r2, r2, #1
 8000aca:	3a01      	subs	r2, #1
 8000acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ad0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fd51 	bl	800057c <HAL_GetTick>
 8000ada:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	019a      	lsls	r2, r3, #6
 8000ae0:	f53f aebc 	bmi.w	800085c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae4:	f7ff fd4a 	bl	800057c <HAL_GetTick>
 8000ae8:	1b40      	subs	r0, r0, r5
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9f6      	bls.n	8000adc <HAL_RCC_OscConfig+0x2b4>
 8000aee:	e6e2      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af0:	f7ff fd44 	bl	800057c <HAL_GetTick>
 8000af4:	1bc0      	subs	r0, r0, r7
 8000af6:	2802      	cmp	r0, #2
 8000af8:	d9d8      	bls.n	8000aac <HAL_RCC_OscConfig+0x284>
 8000afa:	e6dc      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
 8000afc:	40023800 	.word	0x40023800
 8000b00:	42470000 	.word	0x42470000
 8000b04:	42470e80 	.word	0x42470e80
 8000b08:	40007000 	.word	0x40007000
 8000b0c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b10:	f7ff fd34 	bl	800057c <HAL_GetTick>
 8000b14:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	f57f ae9f 	bpl.w	800085c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1e:	f7ff fd2d 	bl	800057c <HAL_GetTick>
 8000b22:	1b00      	subs	r0, r0, r4
 8000b24:	2802      	cmp	r0, #2
 8000b26:	d9f6      	bls.n	8000b16 <HAL_RCC_OscConfig+0x2ee>
 8000b28:	e6c5      	b.n	80008b6 <HAL_RCC_OscConfig+0x8e>
 8000b2a:	bf00      	nop

08000b2c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b2c:	4913      	ldr	r1, [pc, #76]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b2e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b30:	688b      	ldr	r3, [r1, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d003      	beq.n	8000b42 <HAL_RCC_GetSysClockFreq+0x16>
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d003      	beq.n	8000b46 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b40:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b44:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b46:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b48:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b4c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b50:	bf14      	ite	ne
 8000b52:	480c      	ldrne	r0, [pc, #48]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b54:	480a      	ldreq	r0, [pc, #40]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b5a:	bf18      	it	ne
 8000b5c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b62:	fba1 0100 	umull	r0, r1, r1, r0
 8000b66:	f7ff fb37 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x50>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b72:	3301      	adds	r3, #1
 8000b74:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b76:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b7a:	bd08      	pop	{r3, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	00f42400 	.word	0x00f42400
 8000b84:	007a1200 	.word	0x007a1200

08000b88 <HAL_RCC_ClockConfig>:
{
 8000b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b8e:	4604      	mov	r4, r0
 8000b90:	b910      	cbnz	r0, 8000b98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
 8000b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b98:	4b44      	ldr	r3, [pc, #272]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	f002 020f 	and.w	r2, r2, #15
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	d328      	bcc.n	8000bf6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ba4:	6821      	ldr	r1, [r4, #0]
 8000ba6:	078f      	lsls	r7, r1, #30
 8000ba8:	d42d      	bmi.n	8000c06 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000baa:	07c8      	lsls	r0, r1, #31
 8000bac:	d440      	bmi.n	8000c30 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bae:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	f002 020f 	and.w	r2, r2, #15
 8000bb6:	4295      	cmp	r5, r2
 8000bb8:	d366      	bcc.n	8000c88 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bba:	6822      	ldr	r2, [r4, #0]
 8000bbc:	0751      	lsls	r1, r2, #29
 8000bbe:	d46c      	bmi.n	8000c9a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc0:	0713      	lsls	r3, r2, #28
 8000bc2:	d507      	bpl.n	8000bd4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bc4:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000bc6:	6921      	ldr	r1, [r4, #16]
 8000bc8:	6893      	ldr	r3, [r2, #8]
 8000bca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bd2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bd4:	f7ff ffaa 	bl	8000b2c <HAL_RCC_GetSysClockFreq>
 8000bd8:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000bda:	4a36      	ldr	r2, [pc, #216]	; (8000cb4 <HAL_RCC_ClockConfig+0x12c>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	40d8      	lsrs	r0, r3
 8000be6:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <HAL_RCC_ClockConfig+0x130>)
 8000be8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fc7c 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d1c6      	bne.n	8000b92 <HAL_RCC_ClockConfig+0xa>
 8000c04:	e7ce      	b.n	8000ba4 <HAL_RCC_ClockConfig+0x1c>
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c08:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	689a      	ldrne	r2, [r3, #8]
 8000c10:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c14:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c16:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c18:	bf42      	ittt	mi
 8000c1a:	689a      	ldrmi	r2, [r3, #8]
 8000c1c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c20:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	68a0      	ldr	r0, [r4, #8]
 8000c26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	e7bc      	b.n	8000baa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c30:	6862      	ldr	r2, [r4, #4]
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d11d      	bne.n	8000c74 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3e:	d0a8      	beq.n	8000b92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c40:	4e1b      	ldr	r6, [pc, #108]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000c42:	68b3      	ldr	r3, [r6, #8]
 8000c44:	f023 0303 	bic.w	r3, r3, #3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c4c:	f7ff fc96 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c50:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c54:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c56:	68b3      	ldr	r3, [r6, #8]
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	f003 030c 	and.w	r3, r3, #12
 8000c5e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c62:	d0a4      	beq.n	8000bae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c64:	f7ff fc8a 	bl	800057c <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	4540      	cmp	r0, r8
 8000c6c:	d9f3      	bls.n	8000c56 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c6e:	2003      	movs	r0, #3
}
 8000c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c74:	1e91      	subs	r1, r2, #2
 8000c76:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c78:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c7a:	d802      	bhi.n	8000c82 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c80:	e7dd      	b.n	8000c3e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c82:	f013 0f02 	tst.w	r3, #2
 8000c86:	e7da      	b.n	8000c3e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c88:	b2ea      	uxtb	r2, r5
 8000c8a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	429d      	cmp	r5, r3
 8000c94:	f47f af7d 	bne.w	8000b92 <HAL_RCC_ClockConfig+0xa>
 8000c98:	e78f      	b.n	8000bba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c9a:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000c9c:	68e0      	ldr	r0, [r4, #12]
 8000c9e:	688b      	ldr	r3, [r1, #8]
 8000ca0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ca4:	4303      	orrs	r3, r0
 8000ca6:	608b      	str	r3, [r1, #8]
 8000ca8:	e78a      	b.n	8000bc0 <HAL_RCC_ClockConfig+0x38>
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	0800203e 	.word	0x0800203e
 8000cb8:	20000008 	.word	0x20000008

08000cbc <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460e      	mov	r6, r1
 8000cc2:	4615      	mov	r5, r2
 8000cc4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000cc6:	6821      	ldr	r1, [r4, #0]
 8000cc8:	688a      	ldr	r2, [r1, #8]
 8000cca:	ea36 0302 	bics.w	r3, r6, r2
 8000cce:	d001      	beq.n	8000cd4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000cd0:	2000      	movs	r0, #0
}
 8000cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cd4:	1c6b      	adds	r3, r5, #1
 8000cd6:	d0f7      	beq.n	8000cc8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000cd8:	f7ff fc50 	bl	800057c <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	4285      	cmp	r5, r0
 8000ce0:	d8f1      	bhi.n	8000cc6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000cea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cec:	6862      	ldr	r2, [r4, #4]
 8000cee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000cf2:	d10a      	bne.n	8000d0a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000cf4:	68a2      	ldr	r2, [r4, #8]
 8000cf6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000cfa:	d002      	beq.n	8000d02 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000cfc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000d00:	d103      	bne.n	8000d0a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d08:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d0c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d10:	d107      	bne.n	8000d22 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d20:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000d2e:	2003      	movs	r0, #3
 8000d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d36:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <SPI_EndRxTxTransaction+0x54>)
 8000d3a:	4e14      	ldr	r6, [pc, #80]	; (8000d8c <SPI_EndRxTxTransaction+0x58>)
 8000d3c:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d3e:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000d40:	fbb5 f6f6 	udiv	r6, r5, r6
 8000d44:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000d48:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d4a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000d4e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000d50:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d52:	d10d      	bne.n	8000d70 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d54:	460a      	mov	r2, r1
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	f7ff ffb0 	bl	8000cbc <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000d5c:	b910      	cbnz	r0, 8000d64 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000d5e:	2000      	movs	r0, #0
}
 8000d60:	b002      	add	sp, #8
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	e7f7      	b.n	8000d60 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000d70:	9b01      	ldr	r3, [sp, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f3      	beq.n	8000d5e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000d76:	9b01      	ldr	r3, [sp, #4]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	061b      	lsls	r3, r3, #24
 8000d82:	d4f5      	bmi.n	8000d70 <SPI_EndRxTxTransaction+0x3c>
 8000d84:	e7eb      	b.n	8000d5e <SPI_EndRxTxTransaction+0x2a>
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	016e3600 	.word	0x016e3600

08000d90 <HAL_SPI_Init>:
{
 8000d90:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000d92:	4604      	mov	r4, r0
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d036      	beq.n	8000e06 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d9c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000da0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000da4:	b91b      	cbnz	r3, 8000dae <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000da6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000daa:	f000 ff93 	bl	8001cd4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000dae:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000db0:	68a0      	ldr	r0, [r4, #8]
 8000db2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000dba:	680b      	ldr	r3, [r1, #0]
 8000dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dc0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000dc2:	6863      	ldr	r3, [r4, #4]
 8000dc4:	4303      	orrs	r3, r0
 8000dc6:	68e0      	ldr	r0, [r4, #12]
 8000dc8:	4303      	orrs	r3, r0
 8000dca:	6920      	ldr	r0, [r4, #16]
 8000dcc:	4303      	orrs	r3, r0
 8000dce:	6960      	ldr	r0, [r4, #20]
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	69e0      	ldr	r0, [r4, #28]
 8000dd4:	4303      	orrs	r3, r0
 8000dd6:	6a20      	ldr	r0, [r4, #32]
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ddc:	4303      	orrs	r3, r0
 8000dde:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000de2:	4303      	orrs	r3, r0
 8000de4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000de6:	0c12      	lsrs	r2, r2, #16
 8000de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dea:	f002 0204 	and.w	r2, r2, #4
 8000dee:	431a      	orrs	r2, r3
 8000df0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000df2:	69cb      	ldr	r3, [r1, #28]
 8000df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000df8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dfa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000dfc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dfe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000e04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
}
 8000e08:	bd10      	pop	{r4, pc}

08000e0a <HAL_SPI_Transmit>:
{
 8000e0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e0e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000e10:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e14:	2b01      	cmp	r3, #1
{
 8000e16:	4604      	mov	r4, r0
 8000e18:	460d      	mov	r5, r1
 8000e1a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000e1c:	f000 809b 	beq.w	8000f56 <HAL_SPI_Transmit+0x14c>
 8000e20:	2301      	movs	r3, #1
 8000e22:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e26:	f7ff fba9 	bl	800057c <HAL_GetTick>
 8000e2a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e2c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e30:	b2c0      	uxtb	r0, r0
 8000e32:	2801      	cmp	r0, #1
 8000e34:	f040 808d 	bne.w	8000f52 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d05d      	beq.n	8000ef8 <HAL_SPI_Transmit+0xee>
 8000e3c:	f1b8 0f00 	cmp.w	r8, #0
 8000e40:	d05a      	beq.n	8000ef8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e48:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e4a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e4c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e4e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000e50:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000e54:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000e56:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000e58:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000e5a:	6420      	str	r0, [r4, #64]	; 0x40
 8000e5c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e5e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000e64:	bf08      	it	eq
 8000e66:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000e68:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000e6c:	bf04      	itt	eq
 8000e6e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000e72:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e74:	6803      	ldr	r3, [r0, #0]
 8000e76:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000e78:	bf5e      	ittt	pl
 8000e7a:	6803      	ldrpl	r3, [r0, #0]
 8000e7c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000e80:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e82:	68e3      	ldr	r3, [r4, #12]
 8000e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	d13e      	bne.n	8000f0a <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e8c:	b113      	cbz	r3, 8000e94 <HAL_SPI_Transmit+0x8a>
 8000e8e:	f1b8 0f01 	cmp.w	r8, #1
 8000e92:	d107      	bne.n	8000ea4 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e94:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000e98:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e9a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000ea4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b9a3      	cbnz	r3, 8000ed4 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000eaa:	463a      	mov	r2, r7
 8000eac:	4631      	mov	r1, r6
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f7ff ff40 	bl	8000d34 <SPI_EndRxTxTransaction>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d149      	bne.n	8000f4c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	b933      	cbnz	r3, 8000eca <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	9201      	str	r2, [sp, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000ecc:	3000      	adds	r0, #0
 8000ece:	bf18      	it	ne
 8000ed0:	2001      	movne	r0, #1
 8000ed2:	e011      	b.n	8000ef8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	6893      	ldr	r3, [r2, #8]
 8000ed8:	0798      	lsls	r0, r3, #30
 8000eda:	d505      	bpl.n	8000ee8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ede:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000ee2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000ee4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ee6:	e7d9      	b.n	8000e9c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000ee8:	f7ff fb48 	bl	800057c <HAL_GetTick>
 8000eec:	1bc0      	subs	r0, r0, r7
 8000eee:	42b0      	cmp	r0, r6
 8000ef0:	d3d8      	bcc.n	8000ea4 <HAL_SPI_Transmit+0x9a>
 8000ef2:	1c71      	adds	r1, r6, #1
 8000ef4:	d0d6      	beq.n	8000ea4 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000efe:	2300      	movs	r3, #0
 8000f00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f04:	b002      	add	sp, #8
 8000f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000f0a:	b113      	cbz	r3, 8000f12 <HAL_SPI_Transmit+0x108>
 8000f0c:	f1b8 0f01 	cmp.w	r8, #1
 8000f10:	d108      	bne.n	8000f24 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f12:	782b      	ldrb	r3, [r5, #0]
 8000f14:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f18:	3301      	adds	r3, #1
 8000f1a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000f1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0be      	beq.n	8000eaa <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	0792      	lsls	r2, r2, #30
 8000f32:	d503      	bpl.n	8000f3c <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	731a      	strb	r2, [r3, #12]
 8000f3a:	e7ec      	b.n	8000f16 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f3c:	f7ff fb1e 	bl	800057c <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	4286      	cmp	r6, r0
 8000f44:	d8ee      	bhi.n	8000f24 <HAL_SPI_Transmit+0x11a>
 8000f46:	1c73      	adds	r3, r6, #1
 8000f48:	d0ec      	beq.n	8000f24 <HAL_SPI_Transmit+0x11a>
 8000f4a:	e7d4      	b.n	8000ef6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	6563      	str	r3, [r4, #84]	; 0x54
 8000f50:	e7b2      	b.n	8000eb8 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8000f52:	2002      	movs	r0, #2
 8000f54:	e7d0      	b.n	8000ef8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8000f56:	2002      	movs	r0, #2
 8000f58:	e7d4      	b.n	8000f04 <HAL_SPI_Transmit+0xfa>

08000f5a <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f60:	6803      	ldr	r3, [r0, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f68:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000f6a:	bf1e      	ittt	ne
 8000f6c:	681a      	ldrne	r2, [r3, #0]
 8000f6e:	f042 0201 	orrne.w	r2, r2, #1
 8000f72:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f74:	2301      	movs	r3, #1
 8000f76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	4770      	bx	lr

08000f7e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f7e:	6803      	ldr	r3, [r0, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	f042 0201 	orr.w	r2, r2, #1
 8000f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f8e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000f90:	bf1e      	ittt	ne
 8000f92:	681a      	ldrne	r2, [r3, #0]
 8000f94:	f042 0201 	orrne.w	r2, r2, #1
 8000f98:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	4770      	bx	lr

08000f9e <HAL_TIM_OC_DelayElapsedCallback>:
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_TIM_IC_CaptureCallback>:
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_TIM_TriggerCallback>:
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fa6:	6803      	ldr	r3, [r0, #0]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	0791      	lsls	r1, r2, #30
{
 8000fac:	b510      	push	{r4, lr}
 8000fae:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fb0:	d50e      	bpl.n	8000fd0 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	0792      	lsls	r2, r2, #30
 8000fb6:	d50b      	bpl.n	8000fd0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fb8:	f06f 0202 	mvn.w	r2, #2
 8000fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fbe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fc0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fc2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fc4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fc6:	d077      	beq.n	80010b8 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000fc8:	f7ff ffea 	bl	8000fa0 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	691a      	ldr	r2, [r3, #16]
 8000fd4:	0750      	lsls	r0, r2, #29
 8000fd6:	d510      	bpl.n	8000ffa <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	0751      	lsls	r1, r2, #29
 8000fdc:	d50d      	bpl.n	8000ffa <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000fde:	f06f 0204 	mvn.w	r2, #4
 8000fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fe4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fe6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fe8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fec:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000fee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ff0:	d068      	beq.n	80010c4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ff2:	f7ff ffd5 	bl	8000fa0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	0712      	lsls	r2, r2, #28
 8001000:	d50f      	bpl.n	8001022 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	0710      	lsls	r0, r2, #28
 8001006:	d50c      	bpl.n	8001022 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001008:	f06f 0208 	mvn.w	r2, #8
 800100c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800100e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001010:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001012:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001014:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001016:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001018:	d05a      	beq.n	80010d0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800101a:	f7ff ffc1 	bl	8000fa0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800101e:	2300      	movs	r3, #0
 8001020:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	06d2      	lsls	r2, r2, #27
 8001028:	d510      	bpl.n	800104c <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	06d0      	lsls	r0, r2, #27
 800102e:	d50d      	bpl.n	800104c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001030:	f06f 0210 	mvn.w	r2, #16
 8001034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001036:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001038:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800103a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800103e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001040:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001042:	d04b      	beq.n	80010dc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001044:	f7ff ffac 	bl	8000fa0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001048:	2300      	movs	r3, #0
 800104a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	07d1      	lsls	r1, r2, #31
 8001052:	d508      	bpl.n	8001066 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	07d2      	lsls	r2, r2, #31
 8001058:	d505      	bpl.n	8001066 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800105a:	f06f 0201 	mvn.w	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001060:	4620      	mov	r0, r4
 8001062:	f000 fb0f 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	0610      	lsls	r0, r2, #24
 800106c:	d508      	bpl.n	8001080 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	0611      	lsls	r1, r2, #24
 8001072:	d505      	bpl.n	8001080 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800107a:	4620      	mov	r0, r4
 800107c:	f000 f9ec 	bl	8001458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	0652      	lsls	r2, r2, #25
 8001086:	d508      	bpl.n	800109a <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	0650      	lsls	r0, r2, #25
 800108c:	d505      	bpl.n	800109a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800108e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff ff85 	bl	8000fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	691a      	ldr	r2, [r3, #16]
 800109e:	0691      	lsls	r1, r2, #26
 80010a0:	d522      	bpl.n	80010e8 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	0692      	lsls	r2, r2, #26
 80010a6:	d51f      	bpl.n	80010e8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010a8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80010ac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010ae:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80010b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80010b4:	f000 b9cf 	b.w	8001456 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b8:	f7ff ff71 	bl	8000f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff ff70 	bl	8000fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010c2:	e783      	b.n	8000fcc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c4:	f7ff ff6b 	bl	8000f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff ff6a 	bl	8000fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010ce:	e792      	b.n	8000ff6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d0:	f7ff ff65 	bl	8000f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff64 	bl	8000fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010da:	e7a0      	b.n	800101e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010dc:	f7ff ff5f 	bl	8000f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff ff5e 	bl	8000fa2 <HAL_TIM_PWM_PulseFinishedCallback>
 80010e6:	e7af      	b.n	8001048 <HAL_TIM_IRQHandler+0xa2>
 80010e8:	bd10      	pop	{r4, pc}
	...

080010ec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010ec:	4a30      	ldr	r2, [pc, #192]	; (80011b0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80010ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010f0:	4290      	cmp	r0, r2
 80010f2:	d012      	beq.n	800111a <TIM_Base_SetConfig+0x2e>
 80010f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010f8:	d00f      	beq.n	800111a <TIM_Base_SetConfig+0x2e>
 80010fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80010fe:	4290      	cmp	r0, r2
 8001100:	d00b      	beq.n	800111a <TIM_Base_SetConfig+0x2e>
 8001102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001106:	4290      	cmp	r0, r2
 8001108:	d007      	beq.n	800111a <TIM_Base_SetConfig+0x2e>
 800110a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800110e:	4290      	cmp	r0, r2
 8001110:	d003      	beq.n	800111a <TIM_Base_SetConfig+0x2e>
 8001112:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001116:	4290      	cmp	r0, r2
 8001118:	d119      	bne.n	800114e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800111a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800111c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001120:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <TIM_Base_SetConfig+0xc4>)
 8001124:	4290      	cmp	r0, r2
 8001126:	d029      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 8001128:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800112c:	d026      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 800112e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001132:	4290      	cmp	r0, r2
 8001134:	d022      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 8001136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800113a:	4290      	cmp	r0, r2
 800113c:	d01e      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 800113e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001142:	4290      	cmp	r0, r2
 8001144:	d01a      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 8001146:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800114a:	4290      	cmp	r0, r2
 800114c:	d016      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 800114e:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <TIM_Base_SetConfig+0xc8>)
 8001150:	4290      	cmp	r0, r2
 8001152:	d013      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 8001154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001158:	4290      	cmp	r0, r2
 800115a:	d00f      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 800115c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001160:	4290      	cmp	r0, r2
 8001162:	d00b      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 8001164:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001168:	4290      	cmp	r0, r2
 800116a:	d007      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 800116c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001170:	4290      	cmp	r0, r2
 8001172:	d003      	beq.n	800117c <TIM_Base_SetConfig+0x90>
 8001174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001178:	4290      	cmp	r0, r2
 800117a:	d103      	bne.n	8001184 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800117c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800117e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001182:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001184:	694a      	ldr	r2, [r1, #20]
 8001186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800118a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800118c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800118e:	688b      	ldr	r3, [r1, #8]
 8001190:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001192:	680b      	ldr	r3, [r1, #0]
 8001194:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <TIM_Base_SetConfig+0xc4>)
 8001198:	4298      	cmp	r0, r3
 800119a:	d003      	beq.n	80011a4 <TIM_Base_SetConfig+0xb8>
 800119c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011a0:	4298      	cmp	r0, r3
 80011a2:	d101      	bne.n	80011a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011a4:	690b      	ldr	r3, [r1, #16]
 80011a6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011a8:	2301      	movs	r3, #1
 80011aa:	6143      	str	r3, [r0, #20]
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40014000 	.word	0x40014000

080011b8 <HAL_TIM_Base_Init>:
{
 80011b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80011ba:	4604      	mov	r4, r0
 80011bc:	b1a0      	cbz	r0, 80011e8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80011be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011c6:	b91b      	cbnz	r3, 80011d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80011c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011cc:	f000 fe82 	bl	8001ed4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011d6:	6820      	ldr	r0, [r4, #0]
 80011d8:	1d21      	adds	r1, r4, #4
 80011da:	f7ff ff87 	bl	80010ec <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80011de:	2301      	movs	r3, #1
 80011e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80011e4:	2000      	movs	r0, #0
 80011e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
}
 80011ea:	bd10      	pop	{r4, pc}

080011ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80011ec:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80011ee:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011f0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011f2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011f6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80011fa:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011fc:	6083      	str	r3, [r0, #8]
 80011fe:	bd10      	pop	{r4, pc}

08001200 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001200:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001204:	2b01      	cmp	r3, #1
{
 8001206:	b570      	push	{r4, r5, r6, lr}
 8001208:	4604      	mov	r4, r0
 800120a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800120e:	d019      	beq.n	8001244 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8001210:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001214:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001216:	2301      	movs	r3, #1
 8001218:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800121c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800121e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001226:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001228:	680b      	ldr	r3, [r1, #0]
 800122a:	2b40      	cmp	r3, #64	; 0x40
 800122c:	d065      	beq.n	80012fa <HAL_TIM_ConfigClockSource+0xfa>
 800122e:	d815      	bhi.n	800125c <HAL_TIM_ConfigClockSource+0x5c>
 8001230:	2b10      	cmp	r3, #16
 8001232:	d00c      	beq.n	800124e <HAL_TIM_ConfigClockSource+0x4e>
 8001234:	d807      	bhi.n	8001246 <HAL_TIM_ConfigClockSource+0x46>
 8001236:	b153      	cbz	r3, 800124e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001238:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800123a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800123c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001240:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001244:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001246:	2b20      	cmp	r3, #32
 8001248:	d001      	beq.n	800124e <HAL_TIM_ConfigClockSource+0x4e>
 800124a:	2b30      	cmp	r3, #48	; 0x30
 800124c:	d1f4      	bne.n	8001238 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800124e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001250:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001254:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001258:	4313      	orrs	r3, r2
 800125a:	e01a      	b.n	8001292 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800125c:	2b60      	cmp	r3, #96	; 0x60
 800125e:	d034      	beq.n	80012ca <HAL_TIM_ConfigClockSource+0xca>
 8001260:	d819      	bhi.n	8001296 <HAL_TIM_ConfigClockSource+0x96>
 8001262:	2b50      	cmp	r3, #80	; 0x50
 8001264:	d1e8      	bne.n	8001238 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001266:	684a      	ldr	r2, [r1, #4]
 8001268:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800126a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800126c:	6a05      	ldr	r5, [r0, #32]
 800126e:	f025 0501 	bic.w	r5, r5, #1
 8001272:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001274:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001276:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800127a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800127e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001282:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001284:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001286:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001288:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800128a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800128e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001292:	6083      	str	r3, [r0, #8]
 8001294:	e7d0      	b.n	8001238 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001296:	2b70      	cmp	r3, #112	; 0x70
 8001298:	d00c      	beq.n	80012b4 <HAL_TIM_ConfigClockSource+0xb4>
 800129a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800129e:	d1cb      	bne.n	8001238 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80012a0:	68cb      	ldr	r3, [r1, #12]
 80012a2:	684a      	ldr	r2, [r1, #4]
 80012a4:	6889      	ldr	r1, [r1, #8]
 80012a6:	f7ff ffa1 	bl	80011ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	6893      	ldr	r3, [r2, #8]
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	e008      	b.n	80012c6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80012b4:	68cb      	ldr	r3, [r1, #12]
 80012b6:	684a      	ldr	r2, [r1, #4]
 80012b8:	6889      	ldr	r1, [r1, #8]
 80012ba:	f7ff ff97 	bl	80011ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012c6:	6093      	str	r3, [r2, #8]
      break;
 80012c8:	e7b6      	b.n	8001238 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012ca:	684d      	ldr	r5, [r1, #4]
 80012cc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ce:	6a01      	ldr	r1, [r0, #32]
 80012d0:	f021 0110 	bic.w	r1, r1, #16
 80012d4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012d6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80012d8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012da:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80012e2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012e6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80012ea:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80012ec:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80012ee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80012f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80012f4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80012f8:	e7cb      	b.n	8001292 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012fa:	684a      	ldr	r2, [r1, #4]
 80012fc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80012fe:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001300:	6a05      	ldr	r5, [r0, #32]
 8001302:	f025 0501 	bic.w	r5, r5, #1
 8001306:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001308:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800130a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800130e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001312:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001316:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001318:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800131a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800131c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800131e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001322:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001326:	e7b4      	b.n	8001292 <HAL_TIM_ConfigClockSource+0x92>

08001328 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8001328:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800132a:	684a      	ldr	r2, [r1, #4]
{
 800132c:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800132e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001330:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001336:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001338:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800133c:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 800133e:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001340:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8001342:	d01e      	beq.n	8001382 <TIM_SlaveTimer_SetConfig+0x5a>
 8001344:	d803      	bhi.n	800134e <TIM_SlaveTimer_SetConfig+0x26>
 8001346:	2a40      	cmp	r2, #64	; 0x40
 8001348:	d00b      	beq.n	8001362 <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 800134a:	2000      	movs	r0, #0
 800134c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800134e:	2a60      	cmp	r2, #96	; 0x60
 8001350:	d027      	beq.n	80013a2 <TIM_SlaveTimer_SetConfig+0x7a>
 8001352:	2a70      	cmp	r2, #112	; 0x70
 8001354:	d1f9      	bne.n	800134a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8001356:	690b      	ldr	r3, [r1, #16]
 8001358:	688a      	ldr	r2, [r1, #8]
 800135a:	68c9      	ldr	r1, [r1, #12]
 800135c:	f7ff ff46 	bl	80011ec <TIM_ETR_SetConfig>
 8001360:	e7f3      	b.n	800134a <TIM_SlaveTimer_SetConfig+0x22>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001362:	2c05      	cmp	r4, #5
 8001364:	d030      	beq.n	80013c8 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8001366:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001368:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800136a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001372:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001378:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800137c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800137e:	6202      	str	r2, [r0, #32]
 8001380:	e7e3      	b.n	800134a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001382:	688a      	ldr	r2, [r1, #8]
 8001384:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001386:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001388:	6a04      	ldr	r4, [r0, #32]
 800138a:	f024 0401 	bic.w	r4, r4, #1
 800138e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001390:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001392:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800139a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800139e:	430a      	orrs	r2, r1
 80013a0:	e7ec      	b.n	800137c <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80013a2:	688c      	ldr	r4, [r1, #8]
 80013a4:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80013a6:	6a01      	ldr	r1, [r0, #32]
 80013a8:	f021 0110 	bic.w	r1, r1, #16
 80013ac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013ae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80013b0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80013b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80013b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80013ba:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80013be:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80013c2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80013c4:	6203      	str	r3, [r0, #32]
 80013c6:	e7c0      	b.n	800134a <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
}
 80013ca:	bd38      	pop	{r3, r4, r5, pc}

080013cc <HAL_TIM_SlaveConfigSynchro>:
{
 80013cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80013ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013d2:	2b01      	cmp	r3, #1
{
 80013d4:	4604      	mov	r4, r0
 80013d6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80013da:	d01c      	beq.n	8001416 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80013dc:	2501      	movs	r5, #1
 80013de:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80013e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80013e6:	f7ff ff9f 	bl	8001328 <TIM_SlaveTimer_SetConfig>
 80013ea:	b130      	cbz	r0, 80013fa <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80013ec:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 80013ee:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80013f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80013f6:	4628      	mov	r0, r5
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001402:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800140a:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800140c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001410:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001414:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001416:	4618      	mov	r0, r3
}
 8001418:	bd38      	pop	{r3, r4, r5, pc}

0800141a <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800141a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800141e:	2b01      	cmp	r3, #1
{
 8001420:	b530      	push	{r4, r5, lr}
 8001422:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001426:	d014      	beq.n	8001452 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001428:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800142a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800142e:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001430:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001432:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001434:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001436:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800143a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800143e:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001440:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001442:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001444:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001446:	2301      	movs	r3, #1
 8001448:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800144c:	2300      	movs	r3, #0
 800144e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001452:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001454:	bd30      	pop	{r4, r5, pc}

08001456 <HAL_TIMEx_CommutCallback>:
 8001456:	4770      	bx	lr

08001458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001458:	4770      	bx	lr
	...

0800145c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PE11   ------> S_TIM1_CH2
*/
void MX_GPIO_Init(void)
{
 800145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001460:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	2214      	movs	r2, #20
 8001464:	2100      	movs	r1, #0
 8001466:	a807      	add	r0, sp, #28
 8001468:	f000 fdd0 	bl	800200c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146c:	2400      	movs	r4, #0
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <MX_GPIO_Init+0x134>)
 8001470:	9401      	str	r4, [sp, #4]
 8001472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 8001474:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80015a0 <MX_GPIO_Init+0x144>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 8001478:	4e46      	ldr	r6, [pc, #280]	; (8001594 <MX_GPIO_Init+0x138>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800147a:	4f47      	ldr	r7, [pc, #284]	; (8001598 <MX_GPIO_Init+0x13c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147c:	f042 0210 	orr.w	r2, r2, #16
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
 8001482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001484:	f002 0210 	and.w	r2, r2, #16
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148c:	9402      	str	r4, [sp, #8]
 800148e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
 8001496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001498:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	9403      	str	r4, [sp, #12]
 80014a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a4:	f042 0204 	orr.w	r2, r2, #4
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30
 80014aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ac:	f002 0204 	and.w	r2, r2, #4
 80014b0:	9203      	str	r2, [sp, #12]
 80014b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	9404      	str	r4, [sp, #16]
 80014b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b8:	f042 0202 	orr.w	r2, r2, #2
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
 80014be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c0:	f002 0202 	and.w	r2, r2, #2
 80014c4:	9204      	str	r2, [sp, #16]
 80014c6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c8:	9405      	str	r4, [sp, #20]
 80014ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014cc:	f042 0208 	orr.w	r2, r2, #8
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
 80014d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d4:	f002 0208 	and.w	r2, r2, #8
 80014d8:	9205      	str	r2, [sp, #20]
 80014da:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	9406      	str	r4, [sp, #24]
 80014de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 80014ee:	4640      	mov	r0, r8
 80014f0:	2201      	movs	r2, #1
 80014f2:	2103      	movs	r1, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 80014f6:	f7ff f991 	bl	800081c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 80014fa:	4630      	mov	r0, r6
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	f7ff f98b 	bl	800081c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001506:	4622      	mov	r2, r4
 8001508:	4638      	mov	r0, r7
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	f7ff f985 	bl	800081c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_BLA_ON_Pin|LCD_VDD_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = LCD_BLA_ON_Pin|LCD_VDD_ON_Pin;
 8001514:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	a907      	add	r1, sp, #28
 8001518:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LCD_BLA_ON_Pin|LCD_VDD_ON_Pin;
 800151a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f7ff f89b 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800152a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_GPIO_Init+0x140>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001538:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f7ff f88f 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ON_Pin;
 800153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_ON_GPIO_Port, &GPIO_InitStruct);
 8001542:	a907      	add	r1, sp, #28
 8001544:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED_ON_Pin;
 8001546:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_ON_GPIO_Port, &GPIO_InitStruct);
 800154e:	f7ff f885 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001552:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001556:	a907      	add	r1, sp, #28
 8001558:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800155a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001562:	f7ff f87b 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	a907      	add	r1, sp, #28
 800156c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800156e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f7ff f872 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUT4_INPUT_Pin|BUT3_INPUT_Pin|BUT2_INPUT_Pin|BUT1_INPUT_Pin 
 8001578:	237f      	movs	r3, #127	; 0x7f
                          |BUT5_INPUT_Pin|BUT6_INPUT_Pin|BUT7_INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	a907      	add	r1, sp, #28
 800157c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BUT4_INPUT_Pin|BUT3_INPUT_Pin|BUT2_INPUT_Pin|BUT1_INPUT_Pin 
 800157e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f7ff f86a 	bl	800065c <HAL_GPIO_Init>

}
 8001588:	b00c      	add	sp, #48	; 0x30
 800158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020000 	.word	0x40020000
 800159c:	40021000 	.word	0x40021000
 80015a0:	40020800 	.word	0x40020800

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b530      	push	{r4, r5, lr}
 80015a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a8:	2230      	movs	r2, #48	; 0x30
 80015aa:	2100      	movs	r1, #0
 80015ac:	a808      	add	r0, sp, #32
 80015ae:	f000 fd2d 	bl	800200c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b2:	2100      	movs	r1, #0
 80015b4:	2214      	movs	r2, #20
 80015b6:	a803      	add	r0, sp, #12
 80015b8:	f000 fd28 	bl	800200c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2400      	movs	r4, #0
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <SystemClock_Config+0x84>)
 80015c0:	9401      	str	r4, [sp, #4]
 80015c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <SystemClock_Config+0x88>)
 80015d6:	9402      	str	r4, [sp, #8]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e2:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f0:	2310      	movs	r3, #16
 80015f2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015f4:	2308      	movs	r3, #8
 80015f6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015f8:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fa:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015fc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fe:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001600:	2304      	movs	r3, #4
 8001602:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001604:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001606:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001608:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160a:	f7ff f90d 	bl	8000828 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001612:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001614:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001616:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001618:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800161a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001620:	f7ff fab2 	bl	8000b88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001624:	b015      	add	sp, #84	; 0x54
 8001626:	bd30      	pop	{r4, r5, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <main>:
{
 8001630:	b508      	push	{r3, lr}
  HAL_Init();
 8001632:	f7fe ff7d 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8001636:	f7ff ffb5 	bl	80015a4 <SystemClock_Config>
  MX_GPIO_Init();
 800163a:	f7ff ff0f 	bl	800145c <MX_GPIO_Init>
  MX_SPI2_Init();
 800163e:	f000 fb25 	bl	8001c8c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001642:	f000 fbe5 	bl	8001e10 <MX_TIM2_Init>
  MX_TIM9_Init();
 8001646:	f000 fc19 	bl	8001e7c <MX_TIM9_Init>
  initialize_lcd();
 800164a:	f000 f8a5 	bl	8001798 <initialize_lcd>
  HAL_TIM_Base_Start_IT(&htim2);
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <main+0x44>)
	  delay_nops(100000);
 8001650:	4d09      	ldr	r5, [pc, #36]	; (8001678 <main+0x48>)
	  if(CURRENT_RPM > 0) {
 8001652:	4c0a      	ldr	r4, [pc, #40]	; (800167c <main+0x4c>)
  HAL_TIM_Base_Start_IT(&htim2);
 8001654:	f7ff fc93 	bl	8000f7e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim9);
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <main+0x50>)
 800165a:	f7ff fc7e 	bl	8000f5a <HAL_TIM_Base_Start>
	  delay_nops(100000);
 800165e:	4628      	mov	r0, r5
 8001660:	f000 f83f 	bl	80016e2 <delay_nops>
	  if(CURRENT_RPM > 0) {
 8001664:	8820      	ldrh	r0, [r4, #0]
 8001666:	b118      	cbz	r0, 8001670 <main+0x40>
		  write_to_lcd(CURRENT_RPM, LCD_FLAG_FORWARD);
 8001668:	2108      	movs	r1, #8
		  write_to_lcd(CURRENT_RPM, 0);
 800166a:	f000 fa21 	bl	8001ab0 <write_to_lcd>
 800166e:	e7f6      	b.n	800165e <main+0x2e>
 8001670:	4601      	mov	r1, r0
 8001672:	e7fa      	b.n	800166a <main+0x3a>
 8001674:	200000c8 	.word	0x200000c8
 8001678:	000186a0 	.word	0x000186a0
 800167c:	20000028 	.word	0x20000028
 8001680:	20000088 	.word	0x20000088

08001684 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b538      	push	{r3, r4, r5, lr}
	//static uint16_t rpm_history[10];
	//static uint8_t first_time_flag = 1;
	static uint8_t toggle = 0;
	uint16_t current_rpm = 0;
    if (htim->Instance == htim2.Instance)
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001688:	6802      	ldr	r2, [r0, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d11c      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x46>
    {

    	current_rpm = __HAL_TIM_GET_COUNTER(&htim9);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
    	__HAL_TIM_SET_COUNTER(&htim9, 0);
    	current_rpm *= 60; //convert from rps to rpm
    	CURRENT_RPM = current_rpm; //save in global

    	/* toggle LED */
    	if(toggle == 0) {
 8001692:	4c10      	ldr	r4, [pc, #64]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
    	current_rpm = __HAL_TIM_GET_COUNTER(&htim9);
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	6a53      	ldr	r3, [r2, #36]	; 0x24
    	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8001698:	2500      	movs	r5, #0
    	current_rpm = __HAL_TIM_GET_COUNTER(&htim9);
 800169a:	b29b      	uxth	r3, r3
    	__HAL_TIM_SET_COUNTER(&htim9, 0);
 800169c:	6255      	str	r5, [r2, #36]	; 0x24
    	current_rpm *= 60; //convert from rps to rpm
 800169e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    	CURRENT_RPM = current_rpm; //save in global
 80016a2:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
    	current_rpm *= 60; //convert from rps to rpm
 80016a4:	009b      	lsls	r3, r3, #2
    	CURRENT_RPM = current_rpm; //save in global
 80016a6:	8013      	strh	r3, [r2, #0]
    	if(toggle == 0) {
 80016a8:	7822      	ldrb	r2, [r4, #0]
 80016aa:	b93a      	cbnz	r2, 80016bc <HAL_TIM_PeriodElapsedCallback+0x38>
    		HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_RESET);
 80016ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016b2:	f7ff f8b3 	bl	800081c <HAL_GPIO_WritePin>
    		toggle = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	7023      	strb	r3, [r4, #0]
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
    	} else {
    		HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016c4:	f7ff f8aa 	bl	800081c <HAL_GPIO_WritePin>
    		toggle = 0;
 80016c8:	7025      	strb	r5, [r4, #0]
 80016ca:	bd38      	pop	{r3, r4, r5, pc}
 80016cc:	200000c8 	.word	0x200000c8
 80016d0:	20000088 	.word	0x20000088
 80016d4:	2000002a 	.word	0x2000002a
 80016d8:	20000028 	.word	0x20000028
 80016dc:	40020c00 	.word	0x40020c00

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	4770      	bx	lr

080016e2 <delay_nops>:
	delay_nops(1000);
	return;
}

void delay_nops(int nop_count) {
	for (int i = 0; i < nop_count; i++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	4283      	cmp	r3, r0
 80016e6:	db00      	blt.n	80016ea <delay_nops+0x8>
		asm("NOP");
	}
}
 80016e8:	4770      	bx	lr
		asm("NOP");
 80016ea:	bf00      	nop
	for (int i = 0; i < nop_count; i++) {
 80016ec:	3301      	adds	r3, #1
 80016ee:	e7f9      	b.n	80016e4 <delay_nops+0x2>

080016f0 <generate_spi_clock_pulse>:
void generate_spi_clock_pulse(void) {
 80016f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_RESET);
 80016f4:	4c27      	ldr	r4, [pc, #156]	; (8001794 <generate_spi_clock_pulse+0xa4>)
void generate_spi_clock_pulse(void) {
 80016f6:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2103      	movs	r1, #3
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff f88d 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1000);
 8001702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001706:	f7ff ffec 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOC, LCD_BLA_ON_Pin|LCD_VDD_ON_Pin, GPIO_PIN_SET);
 800170a:	4620      	mov	r0, r4
 800170c:	2201      	movs	r2, #1
 800170e:	2103      	movs	r1, #3
 8001710:	f7ff f884 	bl	800081c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001714:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	2214      	movs	r2, #20
 800171a:	2100      	movs	r1, #0
 800171c:	a801      	add	r0, sp, #4
 800171e:	f000 fc75 	bl	800200c <memset>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	4620      	mov	r0, r4
 8001726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172a:	f7ff f877 	bl	800081c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800172e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2600      	movs	r6, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	f04f 0801 	mov.w	r8, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2703      	movs	r7, #3
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800173e:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	f8cd 8008 	str.w	r8, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f7fe ff88 	bl	800065c <HAL_GPIO_Init>
	delay_nops(1000);
 800174c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001750:	f7ff ffc7 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001754:	4632      	mov	r2, r6
 8001756:	4629      	mov	r1, r5
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff f85f 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 800175e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001762:	f7ff ffbe 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001766:	4642      	mov	r2, r8
 8001768:	4629      	mov	r1, r5
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff f856 	bl	800081c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001776:	2305      	movs	r3, #5
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	4620      	mov	r0, r4
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800177c:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f7fe ff6b 	bl	800065c <HAL_GPIO_Init>
	delay_nops(1000);
 8001786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178a:	f7ff ffaa 	bl	80016e2 <delay_nops>
}
 800178e:	b006      	add	sp, #24
 8001790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001794:	40020800 	.word	0x40020800

08001798 <initialize_lcd>:

void initialize_lcd(void) {
 8001798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179c:	b086      	sub	sp, #24

	//Take control of PC3 (MOSI) and PB13 (CLK) from the SPI peripheral.
	//The first time we call spi_generate_clock_pulse() the CLK pin will be
	//handled by SPI peripheral again.

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	2214      	movs	r2, #20
 80017a0:	2100      	movs	r1, #0
 80017a2:	a801      	add	r0, sp, #4
 80017a4:	f000 fc32 	bl	800200c <memset>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2108      	movs	r1, #8
 80017ac:	48bd      	ldr	r0, [pc, #756]	; (8001aa4 <initialize_lcd+0x30c>)
 80017ae:	f7ff f835 	bl	800081c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2400      	movs	r4, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 80017b6:	2708      	movs	r7, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	f04f 0803 	mov.w	r8, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	a901      	add	r1, sp, #4
 80017be:	48b9      	ldr	r0, [pc, #740]	; (8001aa4 <initialize_lcd+0x30c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 80017c2:	9701      	str	r7, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	f8cd 8010 	str.w	r8, [sp, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ca:	f7fe ff47 	bl	800065c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80017ce:	4622      	mov	r2, r4
 80017d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d4:	48b4      	ldr	r0, [pc, #720]	; (8001aa8 <initialize_lcd+0x310>)
 80017d6:	f7ff f821 	bl	800081c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13; //CLOCK
 80017da:	f44f 5600 	mov.w	r6, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	a901      	add	r1, sp, #4
 80017e0:	48b1      	ldr	r0, [pc, #708]	; (8001aa8 <initialize_lcd+0x310>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_13; //CLOCK
 80017e4:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	f8cd 8010 	str.w	r8, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f7fe ff36 	bl	800065c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80017f0:	462a      	mov	r2, r5
 80017f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f6:	48ad      	ldr	r0, [pc, #692]	; (8001aac <initialize_lcd+0x314>)
 80017f8:	f7ff f810 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(2000);
 80017fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001800:	f7ff ff6f 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001804:	4622      	mov	r2, r4
 8001806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180a:	48a8      	ldr	r0, [pc, #672]	; (8001aac <initialize_lcd+0x314>)
 800180c:	f7ff f806 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 8001810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001814:	f7ff ff65 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001818:	462a      	mov	r2, r5
 800181a:	4639      	mov	r1, r7
 800181c:	48a1      	ldr	r0, [pc, #644]	; (8001aa4 <initialize_lcd+0x30c>)
 800181e:	f7fe fffd 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 8001822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001826:	f7ff ff5c 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800182a:	462a      	mov	r2, r5
 800182c:	4631      	mov	r1, r6
 800182e:	489e      	ldr	r0, [pc, #632]	; (8001aa8 <initialize_lcd+0x310>)
 8001830:	f7fe fff4 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 8001834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001838:	f7ff ff53 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800183c:	4622      	mov	r2, r4
 800183e:	4631      	mov	r1, r6
 8001840:	4899      	ldr	r0, [pc, #612]	; (8001aa8 <initialize_lcd+0x310>)
 8001842:	f7fe ffeb 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 8001846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184a:	f7ff ff4a 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800184e:	462a      	mov	r2, r5
 8001850:	4631      	mov	r1, r6
 8001852:	4895      	ldr	r0, [pc, #596]	; (8001aa8 <initialize_lcd+0x310>)
 8001854:	f7fe ffe2 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 8001858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185c:	f7ff ff41 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001860:	4622      	mov	r2, r4
 8001862:	4639      	mov	r1, r7
 8001864:	488f      	ldr	r0, [pc, #572]	; (8001aa4 <initialize_lcd+0x30c>)
 8001866:	f7fe ffd9 	bl	800081c <HAL_GPIO_WritePin>
 800186a:	240b      	movs	r4, #11
	for(int i = 0; i < 11; i++) {
		generate_spi_clock_pulse();
 800186c:	f7ff ff40 	bl	80016f0 <generate_spi_clock_pulse>
	for(int i = 0; i < 11; i++) {
 8001870:	3c01      	subs	r4, #1
 8001872:	d1fb      	bne.n	800186c <initialize_lcd+0xd4>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	2108      	movs	r1, #8
 8001878:	488a      	ldr	r0, [pc, #552]	; (8001aa4 <initialize_lcd+0x30c>)
 800187a:	f7fe ffcf 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 800187e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001882:	f7ff ff2e 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800188c:	4887      	ldr	r0, [pc, #540]	; (8001aac <initialize_lcd+0x314>)
 800188e:	f7fe ffc5 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1500);
 8001892:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001896:	f7ff ff24 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800189a:	4622      	mov	r2, r4
 800189c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a0:	4882      	ldr	r0, [pc, #520]	; (8001aac <initialize_lcd+0x314>)
 80018a2:	f7fe ffbb 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(500);
 80018a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018aa:	f7ff ff1a 	bl	80016e2 <delay_nops>
	generate_spi_clock_pulse();
 80018ae:	f7ff ff1f 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80018b2:	4622      	mov	r2, r4
 80018b4:	2108      	movs	r1, #8
 80018b6:	487b      	ldr	r0, [pc, #492]	; (8001aa4 <initialize_lcd+0x30c>)
 80018b8:	f7fe ffb0 	bl	800081c <HAL_GPIO_WritePin>
 80018bc:	2408      	movs	r4, #8
	for(int i = 0; i < 8; i++) {
		generate_spi_clock_pulse();
 80018be:	f7ff ff17 	bl	80016f0 <generate_spi_clock_pulse>
	for(int i = 0; i < 8; i++) {
 80018c2:	3c01      	subs	r4, #1
 80018c4:	d1fb      	bne.n	80018be <initialize_lcd+0x126>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2108      	movs	r1, #8
 80018ca:	4876      	ldr	r0, [pc, #472]	; (8001aa4 <initialize_lcd+0x30c>)
 80018cc:	f7fe ffa6 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80018d0:	f7ff ff0e 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80018d4:	4622      	mov	r2, r4
 80018d6:	2108      	movs	r1, #8
 80018d8:	4872      	ldr	r0, [pc, #456]	; (8001aa4 <initialize_lcd+0x30c>)
 80018da:	f7fe ff9f 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80018de:	f7ff ff07 	bl	80016f0 <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80018e2:	f7ff ff05 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2108      	movs	r1, #8
 80018ea:	486e      	ldr	r0, [pc, #440]	; (8001aa4 <initialize_lcd+0x30c>)
 80018ec:	f7fe ff96 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1000);
 80018f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f4:	f7ff fef5 	bl	80016e2 <delay_nops>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018fe:	486b      	ldr	r0, [pc, #428]	; (8001aac <initialize_lcd+0x314>)
 8001900:	f7fe ff8c 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1500);
 8001904:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001908:	f7ff feeb 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800190c:	4622      	mov	r2, r4
 800190e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001912:	4866      	ldr	r0, [pc, #408]	; (8001aac <initialize_lcd+0x314>)
 8001914:	f7fe ff82 	bl	800081c <HAL_GPIO_WritePin>

	generate_spi_clock_pulse();
 8001918:	f7ff feea 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800191c:	4622      	mov	r2, r4
 800191e:	2108      	movs	r1, #8
 8001920:	4860      	ldr	r0, [pc, #384]	; (8001aa4 <initialize_lcd+0x30c>)
 8001922:	f7fe ff7b 	bl	800081c <HAL_GPIO_WritePin>
 8001926:	2409      	movs	r4, #9
	for(int i = 0; i < 9; i++) {
		generate_spi_clock_pulse();
 8001928:	f7ff fee2 	bl	80016f0 <generate_spi_clock_pulse>
	for(int i = 0; i < 9; i++) {
 800192c:	3c01      	subs	r4, #1
 800192e:	d1fb      	bne.n	8001928 <initialize_lcd+0x190>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	2108      	movs	r1, #8
 8001934:	485b      	ldr	r0, [pc, #364]	; (8001aa4 <initialize_lcd+0x30c>)
 8001936:	f7fe ff71 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 800193a:	f7ff fed9 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); //here
 800193e:	4622      	mov	r2, r4
 8001940:	2108      	movs	r1, #8
 8001942:	4858      	ldr	r0, [pc, #352]	; (8001aa4 <initialize_lcd+0x30c>)
 8001944:	f7fe ff6a 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001948:	f7ff fed2 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2108      	movs	r1, #8
 8001950:	4854      	ldr	r0, [pc, #336]	; (8001aa4 <initialize_lcd+0x30c>)
 8001952:	f7fe ff63 	bl	800081c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195c:	4853      	ldr	r0, [pc, #332]	; (8001aac <initialize_lcd+0x314>)
 800195e:	f7fe ff5d 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1500);
 8001962:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001966:	f7ff febc 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800196a:	4622      	mov	r2, r4
 800196c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001970:	484e      	ldr	r0, [pc, #312]	; (8001aac <initialize_lcd+0x314>)
 8001972:	f7fe ff53 	bl	800081c <HAL_GPIO_WritePin>

	generate_spi_clock_pulse();
 8001976:	f7ff febb 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800197a:	4622      	mov	r2, r4
 800197c:	2108      	movs	r1, #8
 800197e:	4849      	ldr	r0, [pc, #292]	; (8001aa4 <initialize_lcd+0x30c>)
 8001980:	f7fe ff4c 	bl	800081c <HAL_GPIO_WritePin>
 8001984:	2408      	movs	r4, #8
	for(int i = 0; i < 8; i++) {
		generate_spi_clock_pulse();
 8001986:	f7ff feb3 	bl	80016f0 <generate_spi_clock_pulse>
	for(int i = 0; i < 8; i++) {
 800198a:	3c01      	subs	r4, #1
 800198c:	d1fb      	bne.n	8001986 <initialize_lcd+0x1ee>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800198e:	2201      	movs	r2, #1
 8001990:	2108      	movs	r1, #8
 8001992:	4844      	ldr	r0, [pc, #272]	; (8001aa4 <initialize_lcd+0x30c>)
 8001994:	f7fe ff42 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001998:	f7ff feaa 	bl	80016f0 <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 800199c:	f7ff fea8 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80019a0:	4622      	mov	r2, r4
 80019a2:	2108      	movs	r1, #8
 80019a4:	483f      	ldr	r0, [pc, #252]	; (8001aa4 <initialize_lcd+0x30c>)
 80019a6:	f7fe ff39 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019aa:	f7ff fea1 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2108      	movs	r1, #8
 80019b2:	483c      	ldr	r0, [pc, #240]	; (8001aa4 <initialize_lcd+0x30c>)
 80019b4:	f7fe ff32 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1000);
 80019b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019bc:	f7ff fe91 	bl	80016e2 <delay_nops>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c6:	4839      	ldr	r0, [pc, #228]	; (8001aac <initialize_lcd+0x314>)
 80019c8:	f7fe ff28 	bl	800081c <HAL_GPIO_WritePin>
	delay_nops(1500);
 80019cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80019d0:	f7ff fe87 	bl	80016e2 <delay_nops>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019d4:	4622      	mov	r2, r4
 80019d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019da:	4834      	ldr	r0, [pc, #208]	; (8001aac <initialize_lcd+0x314>)
 80019dc:	f7fe ff1e 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019e0:	f7ff fe86 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80019e4:	4622      	mov	r2, r4
 80019e6:	2108      	movs	r1, #8
 80019e8:	482e      	ldr	r0, [pc, #184]	; (8001aa4 <initialize_lcd+0x30c>)
 80019ea:	f7fe ff17 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 80019ee:	f7ff fe7f 	bl	80016f0 <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80019f2:	f7ff fe7d 	bl	80016f0 <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80019f6:	f7ff fe7b 	bl	80016f0 <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 80019fa:	f7ff fe79 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	2108      	movs	r1, #8
 8001a02:	4828      	ldr	r0, [pc, #160]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a04:	f7fe ff0a 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a08:	f7ff fe72 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	2108      	movs	r1, #8
 8001a10:	4824      	ldr	r0, [pc, #144]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a12:	f7fe ff03 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a16:	f7ff fe6b 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	4821      	ldr	r0, [pc, #132]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a20:	f7fe fefc 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a24:	f7ff fe64 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a28:	4622      	mov	r2, r4
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a2e:	f7fe fef5 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a32:	f7ff fe5d 	bl	80016f0 <generate_spi_clock_pulse>
	generate_spi_clock_pulse();
 8001a36:	f7ff fe5b 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2108      	movs	r1, #8
 8001a3e:	4819      	ldr	r0, [pc, #100]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a40:	f7fe feec 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a44:	f7ff fe54 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a48:	4622      	mov	r2, r4
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a4e:	f7fe fee5 	bl	800081c <HAL_GPIO_WritePin>
	generate_spi_clock_pulse();
 8001a52:	f7ff fe4d 	bl	80016f0 <generate_spi_clock_pulse>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2108      	movs	r1, #8
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <initialize_lcd+0x30c>)
 8001a5c:	f7fe fede 	bl	800081c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	4811      	ldr	r0, [pc, #68]	; (8001aac <initialize_lcd+0x314>)
 8001a68:	f7fe fed8 	bl	800081c <HAL_GPIO_WritePin>



	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2702      	movs	r7, #2
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6e:	2308      	movs	r3, #8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2603      	movs	r6, #3
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a72:	2505      	movs	r5, #5
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	a901      	add	r1, sp, #4
 8001a76:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <initialize_lcd+0x30c>)
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a78:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a80:	9505      	str	r5, [sp, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f7fe fdeb 	bl	800065c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8a:	a901      	add	r1, sp, #4
 8001a8c:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <initialize_lcd+0x310>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a8e:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a96:	9505      	str	r5, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f7fe fde0 	bl	800065c <HAL_GPIO_Init>


	return; //whew...

}
 8001a9c:	b006      	add	sp, #24
 8001a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020000 	.word	0x40020000

08001ab0 <write_to_lcd>:
	uint8_t digit3 = 0; //thousands

	uint16_t temp = 0;

	temp = number_to_display;
	temp = temp % 10000; //ignore any extra digits
 8001ab0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ab4:	fbb0 f2f3 	udiv	r2, r0, r3
 8001ab8:	fb02 0313 	mls	r3, r2, r3, r0
void write_to_lcd(uint16_t number_to_display, uint8_t flags) {
 8001abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	temp = temp % 10000; //ignore any extra digits
 8001ac0:	b29b      	uxth	r3, r3
	digit3 = temp / 1000;
	temp = temp % 1000;
 8001ac2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001ac6:	fbb3 f0f4 	udiv	r0, r3, r4
 8001aca:	fb04 3310 	mls	r3, r4, r0, r3
	digit2 = temp / 100;
	temp = temp % 100;
 8001ace:	2264      	movs	r2, #100	; 0x64
	temp = temp % 1000;
 8001ad0:	b29b      	uxth	r3, r3
	digit1 = temp / 10;

	digit0 = LCD_FLAG_DIGIT_0 | flags;
 8001ad2:	f041 0510 	orr.w	r5, r1, #16
	temp = temp % 100;
 8001ad6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ada:	fb02 3311 	mls	r3, r2, r1, r3
 8001ade:	4e67      	ldr	r6, [pc, #412]	; (8001c7c <write_to_lcd+0x1cc>)
	digit1 = temp / 10;
 8001ae0:	220a      	movs	r2, #10
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	b2c0      	uxtb	r0, r0
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f816 9001 	ldrb.w	r9, [r6, r1]
 8001af2:	f816 8003 	ldrb.w	r8, [r6, r3]
 8001af6:	5c37      	ldrb	r7, [r6, r0]

	//first split out the digits into separate characters



	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001af8:	4e61      	ldr	r6, [pc, #388]	; (8001c80 <write_to_lcd+0x1d0>)
void write_to_lcd(uint16_t number_to_display, uint8_t flags) {
 8001afa:	b089      	sub	sp, #36	; 0x24
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b02:	4630      	mov	r0, r6
 8001b04:	f7fe fe8a 	bl	800081c <HAL_GPIO_WritePin>
	  delay_nops(200);
 8001b08:	20c8      	movs	r0, #200	; 0xc8
 8001b0a:	f7ff fdea 	bl	80016e2 <delay_nops>
	  message[0] = 160;
 8001b0e:	23a0      	movs	r3, #160	; 0xa0
	  message[1] = digit3;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b10:	a802      	add	r0, sp, #8
	  message[0] = 160;
 8001b12:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit3;
 8001b16:	f88d 7009 	strb.w	r7, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b1a:	f7fe fb55 	bl	80001c8 <strlen>
 8001b1e:	4f59      	ldr	r7, [pc, #356]	; (8001c84 <write_to_lcd+0x1d4>)
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b24:	b282      	uxth	r2, r0
 8001b26:	a902      	add	r1, sp, #8
 8001b28:	4638      	mov	r0, r7
 8001b2a:	f7ff f96e 	bl	8000e0a <HAL_SPI_Transmit>
	  generate_spi_clock_pulse();
 8001b2e:	f7ff fddf 	bl	80016f0 <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b38:	4630      	mov	r0, r6
 8001b3a:	f7fe fe6f 	bl	800081c <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff fdcf 	bl	80016e2 <delay_nops>

	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f7fe fe66 	bl	800081c <HAL_GPIO_WritePin>
	  delay_nops(200);
 8001b50:	20c8      	movs	r0, #200	; 0xc8
 8001b52:	f7ff fdc6 	bl	80016e2 <delay_nops>
	  message[0] = 161;
 8001b56:	23a1      	movs	r3, #161	; 0xa1
	  message[1] = digit2;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b58:	a802      	add	r0, sp, #8
	  message[0] = 161;
 8001b5a:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit2;
 8001b5e:	f88d 9009 	strb.w	r9, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b62:	f7fe fb31 	bl	80001c8 <strlen>
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b6a:	b282      	uxth	r2, r0
 8001b6c:	a902      	add	r1, sp, #8
 8001b6e:	4638      	mov	r0, r7
 8001b70:	f7ff f94b 	bl	8000e0a <HAL_SPI_Transmit>
	  generate_spi_clock_pulse();
 8001b74:	f7ff fdbc 	bl	80016f0 <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f7fe fe4c 	bl	800081c <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff fdac 	bl	80016e2 <delay_nops>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b90:	4630      	mov	r0, r6
 8001b92:	f7fe fe43 	bl	800081c <HAL_GPIO_WritePin>

	  delay_nops(200);
 8001b96:	20c8      	movs	r0, #200	; 0xc8
 8001b98:	f7ff fda3 	bl	80016e2 <delay_nops>
	  message[0] = 162;
 8001b9c:	23a2      	movs	r3, #162	; 0xa2
	  message[1] = digit1;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001b9e:	a802      	add	r0, sp, #8
	  message[0] = 162;
 8001ba0:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit1;
 8001ba4:	f88d 8009 	strb.w	r8, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001ba8:	f7fe fb0e 	bl	80001c8 <strlen>
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb0:	b282      	uxth	r2, r0
 8001bb2:	a902      	add	r1, sp, #8
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	f7ff f928 	bl	8000e0a <HAL_SPI_Transmit>
	  delay_nops(1000);

	  /*force data line low due to an issue where the 'STOP' flag was influenced by the ten's digit segment 'G' value. Hack. */
		GPIO_InitTypeDef GPIO_InitStruct = {0};
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001bba:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001c88 <write_to_lcd+0x1d8>
	  delay_nops(1000);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff fd8f 	bl	80016e2 <delay_nops>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	2214      	movs	r2, #20
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	a803      	add	r0, sp, #12
 8001bca:	f000 fa1f 	bl	800200c <memset>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4648      	mov	r0, r9
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	f7fe fe22 	bl	800081c <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	f04f 0801 	mov.w	r8, #1
	  GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 8001bdc:	2308      	movs	r3, #8
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	f04f 0a00 	mov.w	sl, #0
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be2:	a903      	add	r1, sp, #12
 8001be4:	4648      	mov	r0, r9
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	f04f 0b03 	mov.w	fp, #3
	  GPIO_InitStruct.Pin = GPIO_PIN_3; //DATA
 8001bea:	9303      	str	r3, [sp, #12]
 8001bec:	9301      	str	r3, [sp, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	f8cd 8010 	str.w	r8, [sp, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	f8cd a014 	str.w	sl, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	f8cd b018 	str.w	fp, [sp, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f7fe fd2f 	bl	800065c <HAL_GPIO_Init>



	  generate_spi_clock_pulse();
 8001bfe:	f7ff fd77 	bl	80016f0 <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c02:	4642      	mov	r2, r8
 8001c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f7fe fe07 	bl	800081c <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f7ff fd67 	bl	80016e2 <delay_nops>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001c14:	4652      	mov	r2, sl
 8001c16:	4630      	mov	r0, r6
 8001c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c1c:	f7fe fdfe 	bl	800081c <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c20:	9b01      	ldr	r3, [sp, #4]
 8001c22:	9303      	str	r3, [sp, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	a903      	add	r1, sp, #12
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	4648      	mov	r0, r9
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	9307      	str	r3, [sp, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	f8cd a014 	str.w	sl, [sp, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	f8cd b018 	str.w	fp, [sp, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f7fe fd10 	bl	800065c <HAL_GPIO_Init>
	  delay_nops(200);
 8001c3c:	20c8      	movs	r0, #200	; 0xc8
 8001c3e:	f7ff fd50 	bl	80016e2 <delay_nops>
	  message[0] = 163;
 8001c42:	23a3      	movs	r3, #163	; 0xa3
	  message[1] = digit0;
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001c44:	a802      	add	r0, sp, #8
	  message[0] = 163;
 8001c46:	f88d 3008 	strb.w	r3, [sp, #8]
	  message[1] = digit0;
 8001c4a:	f88d 5009 	strb.w	r5, [sp, #9]
	  HAL_SPI_Transmit(&hspi2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001c4e:	f7fe fabb 	bl	80001c8 <strlen>
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	b282      	uxth	r2, r0
 8001c58:	a902      	add	r1, sp, #8
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	f7ff f8d5 	bl	8000e0a <HAL_SPI_Transmit>
	  generate_spi_clock_pulse();
 8001c60:	f7ff fd46 	bl	80016f0 <generate_spi_clock_pulse>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c64:	4642      	mov	r2, r8
 8001c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6a:	4630      	mov	r0, r6
 8001c6c:	f7fe fdd6 	bl	800081c <HAL_GPIO_WritePin>
	  delay_nops(1000);
 8001c70:	4620      	mov	r0, r4
 8001c72:	f7ff fd36 	bl	80016e2 <delay_nops>


	return;
}
 8001c76:	b009      	add	sp, #36	; 0x24
 8001c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7c:	08002034 	.word	0x08002034
 8001c80:	40020000 	.word	0x40020000
 8001c84:	20000030 	.word	0x20000030
 8001c88:	40020800 	.word	0x40020800

08001c8c <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <MX_SPI2_Init+0x40>)
{
 8001c8e:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c90:	2202      	movs	r2, #2
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_SPI2_Init+0x44>)
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c94:	6102      	str	r2, [r0, #16]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c96:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c9a:	2201      	movs	r2, #1
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c9c:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ca0:	6142      	str	r2, [r0, #20]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ca2:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ca8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001caa:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cac:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cae:	6203      	str	r3, [r0, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cb0:	2238      	movs	r2, #56	; 0x38
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cb6:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cb8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 8001cba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cbc:	f7ff f868 	bl	8000d90 <HAL_SPI_Init>
 8001cc0:	b118      	cbz	r0, 8001cca <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 8001cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001cc6:	f7ff bd0b 	b.w	80016e0 <Error_Handler>
 8001cca:	bd08      	pop	{r3, pc}
 8001ccc:	20000030 	.word	0x20000030
 8001cd0:	40003800 	.word	0x40003800

08001cd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	2214      	movs	r2, #20
 8001cdc:	2100      	movs	r1, #0
 8001cde:	a803      	add	r0, sp, #12
 8001ce0:	f000 f994 	bl	800200c <memset>
  if(spiHandle->Instance==SPI2)
 8001ce4:	6822      	ldr	r2, [r4, #0]
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_SPI_MspInit+0x8c>)
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d137      	bne.n	8001d5c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	9400      	str	r4, [sp, #0]
 8001cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf6:	481b      	ldr	r0, [pc, #108]	; (8001d64 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d04:	9200      	str	r2, [sp, #0]
 8001d06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	9401      	str	r4, [sp, #4]
 8001d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0c:	f042 0204 	orr.w	r2, r2, #4
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
 8001d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d14:	f002 0204 	and.w	r2, r2, #4
 8001d18:	9201      	str	r2, [sp, #4]
 8001d1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	9402      	str	r4, [sp, #8]
 8001d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d20:	f042 0202 	orr.w	r2, r2, #2
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d32:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d36:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d38:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d40:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f7fe fc8b 	bl	800065c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	a903      	add	r1, sp, #12
 8001d4c:	4806      	ldr	r0, [pc, #24]	; (8001d68 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d56:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f7fe fc80 	bl	800065c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d5c:	b009      	add	sp, #36	; 0x24
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d60:	40003800 	.word	0x40003800
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020400 	.word	0x40020400

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_MspInit+0x34>)
 8001d70:	2100      	movs	r1, #0
 8001d72:	9100      	str	r1, [sp, #0]
 8001d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	9101      	str	r1, [sp, #4]
 8001d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	b002      	add	sp, #8
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <NMI_Handler>:
 8001da4:	4770      	bx	lr

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	e7fe      	b.n	8001da6 <HardFault_Handler>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler>

08001daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler>

08001dae <SVC_Handler>:
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db4:	f7fe bbd6 	b.w	8000564 <HAL_IncTick>

08001db8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db8:	4801      	ldr	r0, [pc, #4]	; (8001dc0 <TIM2_IRQHandler+0x8>)
 8001dba:	f7ff b8f4 	b.w	8000fa6 <HAL_TIM_IRQHandler>
 8001dbe:	bf00      	nop
 8001dc0:	200000c8 	.word	0x200000c8

08001dc4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	490f      	ldr	r1, [pc, #60]	; (8001e04 <SystemInit+0x40>)
 8001dc6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001dca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <SystemInit+0x44>)
 8001dd4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dd6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001dde:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001de6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <SystemInit+0x48>)
 8001dee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001df6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001df8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001dfe:	608b      	str	r3, [r1, #8]
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	24003010 	.word	0x24003010

08001e10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	2210      	movs	r2, #16
 8001e14:	2100      	movs	r1, #0
 8001e16:	a802      	add	r0, sp, #8
 8001e18:	f000 f8f8 	bl	800200c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001e1c:	4815      	ldr	r0, [pc, #84]	; (8001e74 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1e:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8001e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001e24:	e880 000c 	stmia.w	r0, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 25000000;
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <MX_TIM2_Init+0x68>)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e32:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Period = 25000000;
 8001e34:	60c2      	str	r2, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e36:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e38:	f7ff f9be 	bl	80011b8 <HAL_TIM_Base_Init>
 8001e3c:	b108      	cbz	r0, 8001e42 <MX_TIM2_Init+0x32>
  {
    Error_Handler();
 8001e3e:	f7ff fc4f 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e46:	a902      	add	r1, sp, #8
 8001e48:	480a      	ldr	r0, [pc, #40]	; (8001e74 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e4c:	f7ff f9d8 	bl	8001200 <HAL_TIM_ConfigClockSource>
 8001e50:	b108      	cbz	r0, 8001e56 <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 8001e52:	f7ff fc45 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e56:	2210      	movs	r2, #16
 8001e58:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5a:	4669      	mov	r1, sp
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e62:	f7ff fada 	bl	800141a <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	b108      	cbz	r0, 8001e6c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001e68:	f7ff fc3a 	bl	80016e0 <Error_Handler>
  }

}
 8001e6c:	b007      	add	sp, #28
 8001e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e72:	bf00      	nop
 8001e74:	200000c8 	.word	0x200000c8
 8001e78:	017d7840 	.word	0x017d7840

08001e7c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e7e:	2214      	movs	r2, #20
 8001e80:	2100      	movs	r1, #0
 8001e82:	a801      	add	r0, sp, #4
 8001e84:	f000 f8c2 	bl	800200c <memset>

  htim9.Instance = TIM9;
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <MX_TIM9_Init+0x50>)
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_TIM9_Init+0x54>)
 8001e8c:	6003      	str	r3, [r0, #0]
  htim9.Init.Prescaler = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6043      	str	r3, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e92:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 65000;
 8001e94:	f64f 52e8 	movw	r2, #65000	; 0xfde8
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e9a:	2380      	movs	r3, #128	; 0x80
  htim9.Init.Period = 65000;
 8001e9c:	60c2      	str	r2, [r0, #12]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e9e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001ea0:	f7ff f98a 	bl	80011b8 <HAL_TIM_Base_Init>
 8001ea4:	b108      	cbz	r0, 8001eaa <MX_TIM9_Init+0x2e>
  {
    Error_Handler();
 8001ea6:	f7ff fc1b 	bl	80016e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	9301      	str	r3, [sp, #4]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001eae:	2350      	movs	r3, #80	; 0x50
 8001eb0:	9302      	str	r3, [sp, #8]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001eb2:	a901      	add	r1, sp, #4
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001eb4:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_TIM9_Init+0x50>)
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001eb8:	9303      	str	r3, [sp, #12]
  sSlaveConfig.TriggerFilter = 0;
 8001eba:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8001ebc:	f7ff fa86 	bl	80013cc <HAL_TIM_SlaveConfigSynchro>
 8001ec0:	b108      	cbz	r0, 8001ec6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001ec2:	f7ff fc0d 	bl	80016e0 <Error_Handler>
  }

}
 8001ec6:	b007      	add	sp, #28
 8001ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ecc:	20000088 	.word	0x20000088
 8001ed0:	40014000 	.word	0x40014000

08001ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	2214      	movs	r2, #20
 8001edc:	2100      	movs	r1, #0
 8001ede:	a803      	add	r0, sp, #12
 8001ee0:	f000 f894 	bl	800200c <memset>
  if(tim_baseHandle->Instance==TIM2)
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eea:	d115      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eec:	2200      	movs	r2, #0
 8001eee:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001ef2:	9200      	str	r2, [sp, #0]
 8001ef4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ef6:	f041 0101 	orr.w	r1, r1, #1
 8001efa:	6419      	str	r1, [r3, #64]	; 0x40
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	9300      	str	r3, [sp, #0]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f04:	201c      	movs	r0, #28
 8001f06:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f08:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f0a:	f7fe fb4f 	bl	80005ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f0e:	201c      	movs	r0, #28
 8001f10:	f7fe fb80 	bl	8000614 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001f14:	b008      	add	sp, #32
 8001f16:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM9)
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_TIM_Base_MspInit+0x90>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d1fa      	bne.n	8001f14 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_TIM_Base_MspInit+0x94>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f20:	4812      	ldr	r0, [pc, #72]	; (8001f6c <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f22:	2100      	movs	r1, #0
 8001f24:	9101      	str	r1, [sp, #4]
 8001f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f30:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001f34:	9201      	str	r2, [sp, #4]
 8001f36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f38:	9102      	str	r1, [sp, #8]
 8001f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f3c:	f042 0210 	orr.w	r2, r2, #16
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	9302      	str	r3, [sp, #8]
 8001f4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f5e:	f7fe fb7d 	bl	800065c <HAL_GPIO_Init>
}
 8001f62:	e7d7      	b.n	8001f14 <HAL_TIM_Base_MspInit+0x40>
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40021000 	.word	0x40021000

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f76:	e003      	b.n	8001f80 <LoopCopyDataInit>

08001f78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f7e:	3104      	adds	r1, #4

08001f80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f88:	d3f6      	bcc.n	8001f78 <CopyDataInit>
  ldr  r2, =_sbss
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f8c:	e002      	b.n	8001f94 <LoopFillZerobss>

08001f8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f90:	f842 3b04 	str.w	r3, [r2], #4

08001f94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f98:	d3f9      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9a:	f7ff ff13 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f000 f811 	bl	8001fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7ff fb45 	bl	8001630 <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fac:	08002060 	.word	0x08002060
  ldr  r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001fb8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001fbc:	20000108 	.word	0x20000108

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <__libc_init_array>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	4e0d      	ldr	r6, [pc, #52]	; (8001ffc <__libc_init_array+0x38>)
 8001fc8:	4c0d      	ldr	r4, [pc, #52]	; (8002000 <__libc_init_array+0x3c>)
 8001fca:	1ba4      	subs	r4, r4, r6
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	2500      	movs	r5, #0
 8001fd0:	42a5      	cmp	r5, r4
 8001fd2:	d109      	bne.n	8001fe8 <__libc_init_array+0x24>
 8001fd4:	4e0b      	ldr	r6, [pc, #44]	; (8002004 <__libc_init_array+0x40>)
 8001fd6:	4c0c      	ldr	r4, [pc, #48]	; (8002008 <__libc_init_array+0x44>)
 8001fd8:	f000 f820 	bl	800201c <_init>
 8001fdc:	1ba4      	subs	r4, r4, r6
 8001fde:	10a4      	asrs	r4, r4, #2
 8001fe0:	2500      	movs	r5, #0
 8001fe2:	42a5      	cmp	r5, r4
 8001fe4:	d105      	bne.n	8001ff2 <__libc_init_array+0x2e>
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fec:	4798      	blx	r3
 8001fee:	3501      	adds	r5, #1
 8001ff0:	e7ee      	b.n	8001fd0 <__libc_init_array+0xc>
 8001ff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ff6:	4798      	blx	r3
 8001ff8:	3501      	adds	r5, #1
 8001ffa:	e7f2      	b.n	8001fe2 <__libc_init_array+0x1e>
 8001ffc:	08002058 	.word	0x08002058
 8002000:	08002058 	.word	0x08002058
 8002004:	08002058 	.word	0x08002058
 8002008:	0800205c 	.word	0x0800205c

0800200c <memset>:
 800200c:	4402      	add	r2, r0
 800200e:	4603      	mov	r3, r0
 8002010:	4293      	cmp	r3, r2
 8002012:	d100      	bne.n	8002016 <memset+0xa>
 8002014:	4770      	bx	lr
 8002016:	f803 1b01 	strb.w	r1, [r3], #1
 800201a:	e7f9      	b.n	8002010 <memset+0x4>

0800201c <_init>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	bf00      	nop
 8002020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002022:	bc08      	pop	{r3}
 8002024:	469e      	mov	lr, r3
 8002026:	4770      	bx	lr

08002028 <_fini>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	bf00      	nop
 800202c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202e:	bc08      	pop	{r3}
 8002030:	469e      	mov	lr, r3
 8002032:	4770      	bx	lr
